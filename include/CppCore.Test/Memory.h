#pragma once

#include <CppCore.Test/Root.h>

namespace CppCore { namespace Test
{
   /// <summary>
   /// Tests for Memory.h in CppCore
   /// </summary>
   class Memory
   {
   public:
      INLINE static bool equal32()
      {
         uint32_t m11[] = { 0x00000000U, 0x00000000U, 0x00000000U, 0x00000000U };
         uint32_t m12[] = { 0x00000000U, 0x00000000U, 0x00000000U, 0x00000000U };
         if (!CppCore::Memory::equal32(m11, m12, 4)) return false;

         uint32_t m21[] = { 0x00000000U, 0x00000000U, 0x00000000U, 0x00000000U };
         uint32_t m22[] = { 0x00000000U, 0x00000000U, 0x00010000U, 0x00000000U };
         if (CppCore::Memory::equal32(m21, m22, 4)) return false;

         uint32_t m31[] = { 0xFE83AB71U, 0xFE83AB71U, 0xFE83AB71U };
         uint32_t m32[] = { 0xFE83AB71U, 0xFE83AB71U, 0xFE83AB71U };
         if (!CppCore::Memory::equal32(m31, m32, 3)) return false;

         uint32_t m41[] = { 0x0E83AB71U, 0xFE83AB71U, 0xFE83AB71U };
         uint32_t m42[] = { 0xFE83AB71U, 0xFE83AB71U, 0xFE83AB71U };
         if (CppCore::Memory::equal32(m41, m42, 3)) return false;

         return true;
      }
      INLINE static bool equal64()
      {
         uint64_t m11[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         uint64_t m12[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         if (!CppCore::Memory::equal64(m11, m12, 4)) return false;

         uint64_t m21[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         uint64_t m22[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000100000010000ULL, 0x0000000000000000ULL };
         if (CppCore::Memory::equal64(m21, m22, 4)) return false;

         uint64_t m31[] = { 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };
         uint64_t m32[] = { 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };
         if (!CppCore::Memory::equal64(m31, m32, 3)) return false;

         uint64_t m41[] = { 0x0E83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };
         uint64_t m42[] = { 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };
         if (CppCore::Memory::equal64(m41, m42, 3)) return false;

         return true;
      }
      INLINE static bool equal128()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         CPPCORE_ALIGN16 uint64_t m11[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m12[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };

         CPPCORE_ALIGN16 uint64_t m21[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m22[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000100000010000ULL, 0x0000000000000000ULL };

         CPPCORE_ALIGN16 uint64_t m31[] = { 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };
         CPPCORE_ALIGN16 uint64_t m32[] = { 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };

         CPPCORE_ALIGN16 uint64_t m41[] = { 0x0E83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };
         CPPCORE_ALIGN16 uint64_t m42[] = { 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };

         CPPCORE_ALIGN16 uint64_t m51[]  = { 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m52[]  = { 0x0000000000000001ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m53[]  = { 0x0000000000000100ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m54[]  = { 0x0000000000010000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m55[]  = { 0x0000000001000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m56[]  = { 0x0000000100000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m57[]  = { 0x0000010000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m58[]  = { 0x0001000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m59[]  = { 0x0100000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m510[] = { 0x0000000000000000ULL, 0x0000000000000001ULL };
         CPPCORE_ALIGN16 uint64_t m511[] = { 0x0000000000000000ULL, 0x0000000000000100ULL };
         CPPCORE_ALIGN16 uint64_t m512[] = { 0x0000000000000000ULL, 0x0000000000010000ULL };
         CPPCORE_ALIGN16 uint64_t m513[] = { 0x0000000000000000ULL, 0x0000000001000000ULL };
         CPPCORE_ALIGN16 uint64_t m514[] = { 0x0000000000000000ULL, 0x0000000100000000ULL };
         CPPCORE_ALIGN16 uint64_t m515[] = { 0x0000000000000000ULL, 0x0000010000000000ULL };
         CPPCORE_ALIGN16 uint64_t m516[] = { 0x0000000000000000ULL, 0x0001000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m517[] = { 0x0000000000000000ULL, 0x0100000000000000ULL };

         if (!CppCore::Memory::equal128<false>((__m128i*)&m11, (__m128i*)&m12, 2)) return false;
         if (!CppCore::Memory::equal128<true> ((__m128i*)&m11, (__m128i*)&m12, 2)) return false;

         if (CppCore::Memory::equal128<false>((__m128i*)&m21, (__m128i*)&m22, 2)) return false;
         if (CppCore::Memory::equal128<true> ((__m128i*)&m21, (__m128i*)&m22, 2)) return false;

         if (!CppCore::Memory::equal128<false>((__m128i*)&m31, (__m128i*)&m32, 1)) return false;
         if (!CppCore::Memory::equal128<true> ((__m128i*)&m31, (__m128i*)&m32, 1)) return false;

         if (CppCore::Memory::equal128<false>((__m128i*)&m41, (__m128i*)&m42, 1)) return false;
         if (CppCore::Memory::equal128<true> ((__m128i*)&m41, (__m128i*)&m42, 1)) return false;

         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m52,  1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m53,  1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m54,  1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m55,  1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m56,  1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m57,  1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m58,  1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m59,  1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m510, 1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m511, 1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m512, 1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m513, 1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m514, 1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m515, 1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m516, 1)) return false;
         if (CppCore::Memory::equal128<false>((__m128i*)&m51, (__m128i*)&m517, 1)) return false;

         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m52,  1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m53,  1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m54,  1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m55,  1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m56,  1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m57,  1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m58,  1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m59,  1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m510, 1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m511, 1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m512, 1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m513, 1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m514, 1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m515, 1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m516, 1)) return false;
         if (CppCore::Memory::equal128<true>((__m128i*)&m51, (__m128i*)&m517, 1)) return false;
      #endif
         return true;
      }
      INLINE static bool equal256()
      {
      #if defined(CPPCORE_CPUFEAT_AVX2)
         CPPCORE_ALIGN32 uint64_t m11[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m12[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         if (!CppCore::Memory::equal256((__m256i*)&m11, (__m256i*)&m12, 1)) return false;

         CPPCORE_ALIGN32 uint64_t m21[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m22[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000100000010000ULL, 0x0000000000000000ULL };
         if (CppCore::Memory::equal256((__m256i*)&m21, (__m256i*)&m22, 1)) return false;

         CPPCORE_ALIGN32 uint64_t m31[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL };
         CPPCORE_ALIGN32 uint64_t m32[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000100ULL };
         CPPCORE_ALIGN32 uint64_t m33[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000010000ULL };
         CPPCORE_ALIGN32 uint64_t m34[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000001000000ULL };
         CPPCORE_ALIGN32 uint64_t m35[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000100000000ULL };
         CPPCORE_ALIGN32 uint64_t m36[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000010000000000ULL };
         CPPCORE_ALIGN32 uint64_t m37[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0001000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m38[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0100000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m39[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m40[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m41[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000010000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m42[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000001000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m43[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000100000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m44[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000010000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m45[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0001000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m46[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0100000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m47[] = { 0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m48[] = { 0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m49[] = { 0x0000000000000000ULL, 0x0000000000010000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m50[] = { 0x0000000000000000ULL, 0x0000000001000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m51[] = { 0x0000000000000000ULL, 0x0000000100000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m52[] = { 0x0000000000000000ULL, 0x0000010000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m53[] = { 0x0000000000000000ULL, 0x0001000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m54[] = { 0x0000000000000000ULL, 0x0100000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m55[] = { 0x0000000000000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m56[] = { 0x0000000000000100ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m57[] = { 0x0000000000010000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m58[] = { 0x0000000001000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m59[] = { 0x0000000100000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m60[] = { 0x0000010000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m61[] = { 0x0001000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m62[] = { 0x0100000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };

         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m32, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m32, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m33, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m34, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m35, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m36, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m37, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m38, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m39, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m40, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m41, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m42, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m43, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m44, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m45, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m46, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m47, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m48, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m49, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m50, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m51, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m52, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m53, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m54, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m55, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m56, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m57, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m58, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m59, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m60, 1)) return false;
         if (CppCore::Memory::equal256<false>((__m256i*)&m31, (__m256i*)&m61, 1)) return false;

         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m32, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m32, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m33, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m34, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m35, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m36, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m37, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m38, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m39, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m40, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m41, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m42, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m43, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m44, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m45, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m46, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m47, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m48, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m49, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m50, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m51, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m52, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m53, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m54, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m55, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m56, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m57, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m58, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m59, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m60, 1)) return false;
         if (CppCore::Memory::equal256<true>((__m256i*)&m31, (__m256i*)&m61, 1)) return false;
      #endif
         return true;
      }
      INLINE static bool equal512()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         CPPCORE_ALIGN64 uint64_t m11[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t m12[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         if (!CppCore::Memory::equal512((__m512i*)&m11, (__m512i*)&m12, 1)) return false;

         CPPCORE_ALIGN64 uint64_t m21[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t m22[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000100000010000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         if (CppCore::Memory::equal512((__m512i*)&m21, (__m512i*)&m22, 1)) return false;

         CPPCORE_ALIGN64 uint64_t m31[] = { 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL };
         CPPCORE_ALIGN64 uint64_t m32[] = { 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFFFFFFFFFFFFFFULL };
         if (!CppCore::Memory::equal512((__m512i*)&m31, (__m512i*)&m32, 1)) return false;

         CPPCORE_ALIGN64 uint64_t a30[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a31[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL };
         CPPCORE_ALIGN64 uint64_t a32[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000100ULL };
         CPPCORE_ALIGN64 uint64_t a33[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000010000ULL };
         CPPCORE_ALIGN64 uint64_t a34[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000001000000ULL };
         CPPCORE_ALIGN64 uint64_t a35[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000100000000ULL };
         CPPCORE_ALIGN64 uint64_t a36[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000010000000000ULL };
         CPPCORE_ALIGN64 uint64_t a37[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0001000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a38[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0100000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a39[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a40[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a41[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000010000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a42[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000001000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a43[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000100000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a44[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000010000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a45[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0001000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a46[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0100000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a47[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a48[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a49[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000010000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a50[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000001000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a51[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000100000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a52[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000010000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a53[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0001000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a54[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0100000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a55[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a56[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a57[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000010000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a58[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000001000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a59[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000100000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a60[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000010000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a61[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0001000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a62[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0100000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a63[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a64[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a65[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000010000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a66[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000001000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a67[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000100000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a68[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000010000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a69[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0001000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a70[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0100000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a71[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a72[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a73[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000010000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a74[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000001000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a75[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000100000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a76[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000010000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a77[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0001000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a78[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0100000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a79[] = { 0x0000000000000000ULL, 0x0000000000000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a80[] = { 0x0000000000000000ULL, 0x0000000000000100ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a81[] = { 0x0000000000000000ULL, 0x0000000000010000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a82[] = { 0x0000000000000000ULL, 0x0000000001000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a83[] = { 0x0000000000000000ULL, 0x0000000100000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a84[] = { 0x0000000000000000ULL, 0x0000010000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a85[] = { 0x0000000000000000ULL, 0x0001000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a86[] = { 0x0000000000000000ULL, 0x0100000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a87[] = { 0x0000000000000001ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a88[] = { 0x0000000000000100ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a89[] = { 0x0000000000010000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a90[] = { 0x0000000001000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a91[] = { 0x0000000100000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a92[] = { 0x0000010000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a93[] = { 0x0001000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN64 uint64_t a94[] = { 0x0100000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };

         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a31, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a32, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a33, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a34, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a35, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a36, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a37, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a38, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a39, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a40, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a41, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a42, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a43, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a44, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a45, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a46, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a47, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a48, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a49, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a50, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a51, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a52, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a53, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a54, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a55, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a56, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a57, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a58, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a59, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a60, 1)) return false;
         if (CppCore::Memory::equal512<false>((__m512i*)&a30, (__m512i*)&a61, 1)) return false;

         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a62, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a63, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a64, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a65, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a66, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a67, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a68, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a69, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a70, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a71, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a72, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a73, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a74, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a75, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a76, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a77, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a78, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a79, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a80, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a81, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a82, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a83, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a84, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a85, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a86, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a87, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a88, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a89, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a90, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a91, 1)) return false;
         if (CppCore::Memory::equal512<true>((__m512i*)&a30, (__m512i*)&a92, 1)) return false;
      #endif
         return true;
      }
      INLINE static bool equal()
      {
         //TODO: This is not enough if AVX512 is enabled in it
         const bool a =
            CppCore::Memory::equal("", "", 0) == true &&
            CppCore::Memory::equal("1", "1", 1) == true &&
            CppCore::Memory::equal("12", "12", 2) == true &&
            CppCore::Memory::equal("123", "123", 3) == true &&
            CppCore::Memory::equal("1234", "1234", 4) == true &&
            CppCore::Memory::equal("12345", "12345", 5) == true &&
            CppCore::Memory::equal("123456", "123456", 6) == true &&
            CppCore::Memory::equal("1234567", "1234567", 7) == true &&
            CppCore::Memory::equal("12345678", "12345678", 8) == true &&
            CppCore::Memory::equal("123456789", "123456789", 9) == true &&
            CppCore::Memory::equal("123456789A", "123456789A", 10) == true &&
            CppCore::Memory::equal("123456789AB", "123456789AB", 11) == true &&
            CppCore::Memory::equal("123456789ABC", "123456789ABC", 12) == true &&
            CppCore::Memory::equal("123456789ABCD", "123456789ABCD", 13) == true &&
            CppCore::Memory::equal("123456789ABCDE", "123456789ABCDE", 14) == true &&
            CppCore::Memory::equal("123456789ABCDEF", "123456789ABCDEF", 15) == true &&
            CppCore::Memory::equal("123456789ABCDEFG", "123456789ABCDEFG", 16) == true &&
            CppCore::Memory::equal("123456789ABCDEFGH", "123456789ABCDEFGH", 17) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHI", "123456789ABCDEFGHI", 18) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJ", "123456789ABCDEFGHIJ", 19) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJK", "123456789ABCDEFGHIJK", 20) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKL", "123456789ABCDEFGHIJKL", 21) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLM", "123456789ABCDEFGHIJKLM", 22) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMN", "123456789ABCDEFGHIJKLMN", 23) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNO", "123456789ABCDEFGHIJKLMNO", 24) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOP", "123456789ABCDEFGHIJKLMNOP", 25) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQ", "123456789ABCDEFGHIJKLMNOPQ", 26) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQR", "123456789ABCDEFGHIJKLMNOPQR", 27) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRS", "123456789ABCDEFGHIJKLMNOPQRS", 28) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRST", "123456789ABCDEFGHIJKLMNOPQRST", 29) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTU", "123456789ABCDEFGHIJKLMNOPQRSTU", 30) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUV", "123456789ABCDEFGHIJKLMNOPQRSTUV", 31) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUVW", "123456789ABCDEFGHIJKLMNOPQRSTUVW", 32) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUVWX", "123456789ABCDEFGHIJKLMNOPQRSTUVWX", 33) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUVWXY", "123456789ABCDEFGHIJKLMNOPQRSTUVWXY", 34) == true &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", 35) == true;
         const bool b = 
            CppCore::Memory::equal("1",                                   "x", 1) == false &&
            CppCore::Memory::equal("12",                                  "xx", 2) == false &&
            CppCore::Memory::equal("123",                                 "xxx", 3) == false &&
            CppCore::Memory::equal("1234",                                "xxxx", 4) == false &&
            CppCore::Memory::equal("12345",                               "xxxxx", 5) == false &&
            CppCore::Memory::equal("123456",                              "xxxxxx", 6) == false &&
            CppCore::Memory::equal("1234567",                             "xxxxxxx", 7) == false &&
            CppCore::Memory::equal("12345678",                            "xxxxxxxx", 8) == false &&
            CppCore::Memory::equal("123456789",                           "xxxxxxxxx", 9) == false &&
            CppCore::Memory::equal("123456789A",                          "xxxxxxxxxx", 10) == false &&
            CppCore::Memory::equal("123456789AB",                         "xxxxxxxxxxx", 11) == false &&
            CppCore::Memory::equal("123456789ABC",                        "xxxxxxxxxxxx", 12) == false &&
            CppCore::Memory::equal("123456789ABCD",                       "zzzzzzzzzzzzz", 13) == false &&
            CppCore::Memory::equal("123456789ABCDE",                      "rtrtrtrtrtrtrt", 14) == false &&
            CppCore::Memory::equal("123456789ABCDEF",                     "23456789ABCDEFG", 15) == false &&
            CppCore::Memory::equal("123456789ABCDEFG",                    "0000000000000000", 16) == false &&
            CppCore::Memory::equal("123456789ABCDEFGH",                   "11111111111111111", 17) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHI",                  "222222222222222222", 18) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJ",                 "3333333333333333333", 19) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJK",                "44444444444444444444", 20) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKL",               "555555555555555555555", 21) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLM",              "6666666666666666666666", 22) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMN",             "aaaaaaaaaaaaaaaaaaaaaaa", 23) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNO",            "efefefefefefefefefefefef", 24) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOP",           "fffffffffffffffffffffffff", 25) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQ",          "66666666666666666666666666", 26) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQR",         "aaaaaaaaaaaaaaaaaaaaaaaaaaa", 27) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRS",        "aaaaaaaaaaaaaaaaaaaaaaaaaaaa", 28) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRST",       "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 29) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTU",      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 30) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUV",     "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 31) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUVW",    "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 32) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUVWX",   "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 33) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUVWXY",  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", 34) == false &&
            CppCore::Memory::equal("123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", "123456789ABCDEFGHIJKLMNOPQRSTUVWXYz", 35) == false;
         return a && b;
      }
      
      INLINE static bool testzero128()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         CPPCORE_ALIGN16 uint64_t m1[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN16 uint64_t m2[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL };
         CPPCORE_ALIGN16 uint64_t m3[] = { 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };

         if (!CppCore::Memory::testzero128<false>((__m128i*)&m1, 2)) return false;
         if (!CppCore::Memory::testzero128<true> ((__m128i*)&m1, 2)) return false;
         if ( CppCore::Memory::testzero128<false>((__m128i*)&m2, 2)) return false;
         if ( CppCore::Memory::testzero128<true> ((__m128i*)&m2, 2)) return false;
         if ( CppCore::Memory::testzero128<false>((__m128i*)&m3, 2)) return false;
         if ( CppCore::Memory::testzero128<true> ((__m128i*)&m3, 2)) return false;
      #endif
         return true;
      }
      
      INLINE static bool testzero256()
      {
      #if defined(CPPCORE_CPUFEAT_AVX)
         CPPCORE_ALIGN32 uint64_t m1[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL };
         CPPCORE_ALIGN32 uint64_t m2[] = { 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000001ULL };
         CPPCORE_ALIGN32 uint64_t m3[] = { 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL, 0xFE83AB71FE83AB71ULL };

         if (!CppCore::Memory::testzero256<false>((__m256i*)&m1, 1)) return false;
         if (!CppCore::Memory::testzero256<true> ((__m256i*)&m1, 1)) return false;
         if ( CppCore::Memory::testzero256<false>((__m256i*)&m2, 1)) return false;
         if ( CppCore::Memory::testzero256<true> ((__m256i*)&m2, 1)) return false;
         if ( CppCore::Memory::testzero256<false>((__m256i*)&m3, 1)) return false;
         if ( CppCore::Memory::testzero256<true> ((__m256i*)&m3, 1)) return false;
      #endif
         return true;
      }


      INLINE static bool streamset128x4()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         CPPCORE_ALIGN16 char mem1[1024];
         CPPCORE_ALIGN16 char mem2[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            mem1[i] = (char)rnd.next();
         memset(mem2, 0, 1024);
         CppCore::Memory::streamset128x4(mem1, 1024, _mm_setzero_si128());
         if (0 != ::memcmp(mem1, mem2, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamset256x4()
      {
      #if defined(CPPCORE_CPUFEAT_AVX)
         CPPCORE_ALIGN32 char mem1[1024];
         CPPCORE_ALIGN32 char mem2[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            mem1[i] = (char)rnd.next();
         memset(mem2, 0, 1024);
         CppCore::Memory::streamset256x4(mem1, 1024, _mm256_setzero_si256());
         if (0 != ::memcmp(mem1, mem2, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamset512x4()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         CPPCORE_ALIGN64 char mem1[1024];
         CPPCORE_ALIGN64 char mem2[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            mem1[i] = (char)rnd.next();
         memset(mem2, 0, 1024);
         CppCore::Memory::streamset512x4(mem1, 1024, _mm512_setzero_si512());
         if (0 != ::memcmp(mem1, mem2, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool singlecopy128()
      {
         CPPCORE_ALIGN16 char src[16];
         CPPCORE_ALIGN16 char dst[16];
         Random::Default32 rnd;
         for (size_t i = 0; i < 16; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::singlecopy128<1, 1>(dst, src);
         if (0 != ::memcmp(src, dst, 16))
            return false;
         CppCore::Memory::singlecopy128<1, 16>(dst, src);
         if (0 != ::memcmp(src, dst, 16))
            return false;
         CppCore::Memory::singlecopy128<16, 1>(dst, src);
         if (0 != ::memcmp(src, dst, 16))
            return false;
         CppCore::Memory::singlecopy128<16, 16>(dst, src);
         if (0 != ::memcmp(src, dst, 16))
            return false;
         return true;
      }
      INLINE static bool singlecopy256()
      {
         CPPCORE_ALIGN32 char src[32];
         CPPCORE_ALIGN32 char dst[32];
         Random::Default32 rnd;
         for (size_t i = 0; i < 32; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::singlecopy256<1, 1>(dst, src);
         if (0 != ::memcmp(src, dst, 32))
            return false;
         CppCore::Memory::singlecopy256<1, 32>(dst, src);
         if (0 != ::memcmp(src, dst, 32))
            return false;
         CppCore::Memory::singlecopy256<32, 1>(dst, src);
         if (0 != ::memcmp(src, dst, 32))
            return false;
         CppCore::Memory::singlecopy256<32, 32>(dst, src);
         if (0 != ::memcmp(src, dst, 32))
            return false;
         return true;
      }
      INLINE static bool singlecopy512()
      {
         CPPCORE_ALIGN64 char src[64];
         CPPCORE_ALIGN64 char dst[64];
         Random::Default32 rnd;
         for (size_t i = 0; i < 64; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::singlecopy512<1, 1>(dst, src);
         if (0 != ::memcmp(src, dst, 64))
            return false;
         CppCore::Memory::singlecopy512<1, 64>(dst, src);
         if (0 != ::memcmp(src, dst, 64))
            return false;
         CppCore::Memory::singlecopy512<64, 1>(dst, src);
         if (0 != ::memcmp(src, dst, 64))
            return false;
         CppCore::Memory::singlecopy512<64, 64>(dst, src);
         if (0 != ::memcmp(src, dst, 64))
            return false;
         return true;
      }
      INLINE static bool copy32()
      {
         const size_t       n32 = 16;
         uint32_t           src[n32];
         uint32_t           dst[n32];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < n32; i++)
            src[i] = rnd.next();
         for (size_t i = 0; i < n32; i++)
            CppCore::Memory::copy32(dst, src, n32);
         if (0 != ::memcmp(src, dst, n32*4U))
            return false;
         return true;
      }
      INLINE static bool copy64()
      {
         const size_t       n64 = 16;
         uint64_t           src[n64];
         uint64_t           dst[n64];
         Random::Std::Int64 rnd;
         for (size_t i = 0; i < n64; i++)
            src[i] = rnd.next();
         for (size_t i = 0; i < n64; i++)
            CppCore::Memory::copy64(dst, src, n64);
         if (0 != ::memcmp(src, dst, n64*8U))
            return false;
         return true;
      }
      INLINE static bool copy128()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         const size_t n128 = 16;
         CPPCORE_ALIGN16 uint64_t src[n128*2];
         CPPCORE_ALIGN16 uint64_t dst[n128*2];
         Random::Std::Int64 rnd;
         for (size_t i = 0; i < n128*2; i++)
            src[i] = rnd.next();
         for (size_t i = 0; i < n128; i++)
            CppCore::Memory::copy128<false>((__m128i*)dst, (__m128i*)src, n128);
         if (0 != ::memcmp(src, dst, n128*16U))
            return false;
      #endif
         return true;
      }
      INLINE static bool copy256()
      {
      #if defined(CPPCORE_CPUFEAT_AVX)
         const size_t n256 = 16;
         CPPCORE_ALIGN32 uint64_t src[n256*4];
         CPPCORE_ALIGN32 uint64_t dst[n256*4];
         Random::Std::Int64 rnd;
         for (size_t i = 0; i < n256*4; i++)
            src[i] = rnd.next();
         for (size_t i = 0; i < n256; i++)
            CppCore::Memory::copy256<false>((__m256i*)dst, (__m256i*)src, n256);
         if (0 != ::memcmp(src, dst, n256*32U))
            return false;
      #endif
         return true;
      }
      INLINE static bool copy512()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         const size_t n512 = 16;
         CPPCORE_ALIGN64 uint64_t src[n512*8];
         CPPCORE_ALIGN64 uint64_t dst[n512*8];
         Random::Std::Int64 rnd;
         for (size_t i = 0; i < n512*8; i++)
            src[i] = rnd.next();
         for (size_t i = 0; i < n512; i++)
            CppCore::Memory::copy512<false>((__m512i*)dst, (__m512i*)src, n512);
         if (0 != ::memcmp(src, dst, n512*64U))
            return false;
      #endif
         return true;
      }
      INLINE static bool copy()
      {
         const size_t n512 = 4;
         const size_t n256 = 1;
         const size_t n128 = 1;
         const size_t n64  = 1;
         const size_t n32  = 1;
         const size_t n16  = 1;
         const size_t n8   = 1;
         const size_t num  = n512*64 + n256*32 + n128*16 + n64*8 + n32*4 + n16*2 + n8;
         CPPCORE_ALIGN64 char src[num];
         CPPCORE_ALIGN64 char dst[num];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < num; i++)
            src[i] = rnd.next() & 0xFF;
         CppCore::Memory::copy(dst, src, num);
         if (0 != ::memcmp(src, dst, num))
            return false;
         return true;
      }
      INLINE static bool copybackwards()
      {
         const size_t n512 = 4;
         const size_t n256 = 1;
         const size_t n128 = 1;
         const size_t n64  = 1;
         const size_t n32  = 1;
         const size_t n16  = 1;
         const size_t n8   = 1;
         const size_t num  = n512*64 + n256*32 + n128*16 + n64*8 + n32*4 + n16*2 + n8;
         CPPCORE_ALIGN64 char src[num];
         CPPCORE_ALIGN64 char dst[num];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < num; i++)
            src[i] = rnd.next() & 0xFF;
         CppCore::Memory::copybackwards(dst, src, num);
         if (0 != ::memcmp(src, dst, num))
            return false;
         return true;
      }
      INLINE static bool streamcopy128()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         const size_t n128 = 16;
         CPPCORE_ALIGN16 uint64_t src[n128*2];
         CPPCORE_ALIGN16 uint64_t dst[n128*2];
         Random::Std::Int64 rnd;
         for (size_t i = 0; i < n128*2; i++)
            src[i] = rnd.next();
         CppCore::Memory::streamcopy128((__m128i*)dst, (__m128i*)src, n128);
         if (0 != ::memcmp(src, dst, n128*16U))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy128x1()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         CPPCORE_ALIGN16 char src[1024];
         CPPCORE_ALIGN16 char dst[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::streamcopy128x1(dst, src, 1024);
         if (0 != ::memcmp(src, dst, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy128x2()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         CPPCORE_ALIGN16 char src[1024];
         CPPCORE_ALIGN16 char dst[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::streamcopy128x2(dst, src, 1024);
         if (0 != ::memcmp(src, dst, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy128x4()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         CPPCORE_ALIGN16 char src[1024];
         CPPCORE_ALIGN16 char dst[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::streamcopy128x4(dst, src, 1024);
         if (0 != ::memcmp(src, dst, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy256()
      {
      #if defined(CPPCORE_CPUFEAT_AVX)
         const size_t n256 = 16;
         CPPCORE_ALIGN32 uint64_t src[n256*4];
         CPPCORE_ALIGN32 uint64_t dst[n256*4];
         Random::Std::Int64 rnd;
         for (size_t i = 0; i < n256*4; i++)
            src[i] = rnd.next();
         for (size_t i = 0; i < n256; i++)
            CppCore::Memory::streamcopy256((__m256i*)dst, (__m256i*)src, n256);
         if (0 != ::memcmp(src, dst, n256*32U))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy256x1()
      {
      #if defined(CPPCORE_CPUFEAT_AVX)
         CPPCORE_ALIGN32 char src[1024];
         CPPCORE_ALIGN32 char dst[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::streamcopy256x1(dst, src, 1024);
         if (0 != ::memcmp(src, dst, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy256x2()
      {
      #if defined(CPPCORE_CPUFEAT_AVX)
         CPPCORE_ALIGN32 char src[1024];
         CPPCORE_ALIGN32 char dst[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::streamcopy256x2(dst, src, 1024);
         if (0 != ::memcmp(src, dst, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy256x4()
      {
      #if defined(CPPCORE_CPUFEAT_AVX)
         CPPCORE_ALIGN32 char src[1024];
         CPPCORE_ALIGN32 char dst[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::streamcopy256x4(dst, src, 1024);
         if (0 != ::memcmp(src, dst, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy512()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         const size_t n512 = 16;
         CPPCORE_ALIGN64 uint64_t src[n512*8];
         CPPCORE_ALIGN64 uint64_t dst[n512*8];
         Random::Std::Int64 rnd;
         for (size_t i = 0; i < n512*8; i++)
            src[i] = rnd.next();
         for (size_t i = 0; i < n512; i++)
            CppCore::Memory::streamcopy512((__m512i*)dst, (__m512i*)src, n512);
         if (0 != ::memcmp(src, dst, n512*64U))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy512x1()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         CPPCORE_ALIGN64 char src[1024];
         CPPCORE_ALIGN64 char dst[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::streamcopy512x1(dst, src, 1024);
         if (0 != ::memcmp(src, dst, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy512x2()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         CPPCORE_ALIGN64 char src[1024];
         CPPCORE_ALIGN64 char dst[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::streamcopy512x2(dst, src, 1024);
         if (0 != ::memcmp(src, dst, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool streamcopy512x4()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         CPPCORE_ALIGN64 char src[1024];
         CPPCORE_ALIGN64 char dst[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            src[i] = (char)rnd.next();
         CppCore::Memory::streamcopy512x4(dst, src, 1024);
         if (0 != ::memcmp(src, dst, 1024))
            return false;
      #endif
         return true;
      }
      INLINE static bool copyreverse8()
      {
         uint8_t r[]  = { 0x00, 0x00, 0x00 };
         uint8_t a[]  = { 0x00, 0x01, 0x02 };
         uint8_t ar[] = { 0x02, 0x01, 0x00 };
         CppCore::Memory::copyreverse8(r, a, 3); 
         return CppCore::Memory::equal8(r, ar, 3);
      }
      INLINE static bool copyreverse16()
      {
         uint8_t r[]  = { 0x00, 0x00, 0x00, 0x00 };
         uint8_t a[]  = { 0x00, 0x01, 0x02, 0x03 };
         uint8_t ar[] = { 0x03, 0x02, 0x01, 0x00 };
         CppCore::Memory::copyreverse16((uint16_t*)r, (uint16_t*)a, 2);
         return CppCore::Memory::equal16((uint16_t*)r, (uint16_t*)ar, 2);
      }
      INLINE static bool copyreverse32()
      {
         uint8_t r[]  = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
         uint8_t a[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
         uint8_t ar[] = { 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 };
         CppCore::Memory::copyreverse32((uint32_t*)r, (uint32_t*)a, 2);
         return CppCore::Memory::equal32((uint32_t*)r, (uint32_t*)ar, 2);
      }
      INLINE static bool copyreverse64()
      {
         uint8_t r[]  = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
         uint8_t a[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
         uint8_t ar[] = { 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 };
         CppCore::Memory::copyreverse64((uint64_t*)r, (uint64_t*)a, 2);
         return CppCore::Memory::equal64((uint64_t*)r, (uint64_t*)ar, 2);
      }
      INLINE static bool copyreverse128()
      {
      #if defined(CPPCORE_CPUFEAT_SSSE3)
         uint8_t r[]  = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
         uint8_t a[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F };
         uint8_t ar[] = { 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 };
         CppCore::Memory::copyreverse128<false>((__m128i*)r, (__m128i*)a, 2);
         return CppCore::Memory::equal128<false>((__m128i*)r, (__m128i*)ar, 2);
      #else
         return true;
      #endif
      }
      INLINE static bool copyreverse()
      {
         uint8_t r[]  = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
         uint8_t a[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E };
         uint8_t ar[] = { 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 };
         CppCore::Memory::copyreverse(r, a, sizeof(r));
         return CppCore::Memory::equal(r, ar, sizeof(r));
      }
      INLINE static bool streamcopyreverse128()
      {
      #if defined(CPPCORE_CPUFEAT_SSSE3)
         CPPCORE_ALIGN16 uint8_t r[]  = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
         CPPCORE_ALIGN16 uint8_t a[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F };
         CPPCORE_ALIGN16 uint8_t ar[] = { 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 };
         CppCore::Memory::streamcopyreverse128((__m128i*)r, (__m128i*)a, 2);
         return CppCore::Memory::equal128<true>((__m128i*)r, (__m128i*)ar, 2);
      #else
         return true;
      #endif
      }
      INLINE static bool streamcopyreverse128x1()
      {
      #if defined(CPPCORE_CPUFEAT_SSSE3)
         CPPCORE_ALIGN16 char a[1024];
         CPPCORE_ALIGN16 char b[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            a[i] = (char)rnd.next();
         CppCore::Memory::streamcopyreverse128x1(b, a, 1024);
         for (size_t i = 0; i < 1024; i++)
            if (a[i] != b[1023 - i])
               return false;
         return true;
      #else
         return true;
      #endif
      }
      INLINE static bool streamcopyreverse128x2()
      {
      #if defined(CPPCORE_CPUFEAT_SSSE3)
         CPPCORE_ALIGN16 char a[1024];
         CPPCORE_ALIGN16 char b[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            a[i] = (char)rnd.next();
         CppCore::Memory::streamcopyreverse128x2(b, a, 1024);
         for (size_t i = 0; i < 1024; i++)
            if (a[i] != b[1023 - i])
               return false;
         return true;
      #else
         return true;
      #endif
      }
      INLINE static bool streamcopyreverse128x4()
      {
      #if defined(CPPCORE_CPUFEAT_SSSE3)
         CPPCORE_ALIGN16 char a[1024];
         CPPCORE_ALIGN16 char b[1024];
         Random::Std::Int32 rnd;
         for (size_t i = 0; i < 1024; i++)
            a[i] = (char)rnd.next();
         CppCore::Memory::streamcopyreverse128x4(b, a, 1024);
         for (size_t i = 0; i < 1024; i++)
            if (a[i] != b[1023 - i])
               return false;
         return true;
      #else
         return true;
      #endif
      }
      INLINE static bool swap8()
      {
         uint8_t a[]  = { 0x01, 0x02, 0x03 };
         uint8_t b[]  = { 0x04, 0x05, 0x06 };
         uint8_t ar[] = { 0x04, 0x05, 0x06 };
         uint8_t br[] = { 0x01, 0x02, 0x03 };
         CppCore::Memory::swap8(a, b, 3); 
         return CppCore::Memory::equal8(a, ar, 3) && CppCore::Memory::equal8(b, br, 3);
      }
      INLINE static bool swap16()
      {
         uint8_t a[]  = { 0x01, 0x02, 0x03, 0x04 };
         uint8_t b[]  = { 0x05, 0x06, 0x07, 0x08 };
         uint8_t ar[] = { 0x05, 0x06, 0x07, 0x08 };
         uint8_t br[] = { 0x01, 0x02, 0x03, 0x04 };
         CppCore::Memory::swap16((uint16_t*)a, (uint16_t*)b, 2);
         return CppCore::Memory::equal16((uint16_t*)a, (uint16_t*)ar, 2) && CppCore::Memory::equal16((uint16_t*)b, (uint16_t*)br, 2);
      }
      INLINE static bool swap32()
      {
         uint8_t a[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07 };
         uint8_t b[]  = { 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7 };
         uint8_t ar[sizeof(a)]; CppCore::Memory::copy32((uint32_t*)ar, (uint32_t*)b, 2);
         uint8_t br[sizeof(b)]; CppCore::Memory::copy32((uint32_t*)br, (uint32_t*)a, 2);
         CppCore::Memory::swap32((uint32_t*)a, (uint32_t*)b, 2);
         return CppCore::Memory::equal32((uint32_t*)a, (uint32_t*)ar, 2) && CppCore::Memory::equal32((uint32_t*)b, (uint32_t*)br, 2);
      }
      INLINE static bool swap64()
      {
         uint8_t a[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F };
         uint8_t b[]  = { 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF };
         uint8_t ar[sizeof(a)]; CppCore::Memory::copy64((uint64_t*)ar, (uint64_t*)b, 2);
         uint8_t br[sizeof(b)]; CppCore::Memory::copy64((uint64_t*)br, (uint64_t*)a, 2);
         CppCore::Memory::swap64((uint64_t*)a, (uint64_t*)b, 2);
         return CppCore::Memory::equal64((uint64_t*)a, (uint64_t*)ar, 2) && CppCore::Memory::equal64((uint64_t*)b, (uint64_t*)br, 2);
      }
      INLINE static bool swap128()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         CPPCORE_ALIGN16 uint8_t a[]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F };
         CPPCORE_ALIGN16 uint8_t b[]  = { 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF };
         CPPCORE_ALIGN16 uint8_t ar[sizeof(a)]; CppCore::Memory::copy128((__m128i*)ar, (__m128i*)b, 2);
         CPPCORE_ALIGN16 uint8_t br[sizeof(b)]; CppCore::Memory::copy128((__m128i*)br, (__m128i*)a, 2);
         CppCore::Memory::swap128((__m128i*)a, (__m128i*)b, 2);
         return CppCore::Memory::equal128((__m128i*)a, (__m128i*)ar, 2) && CppCore::Memory::equal128((__m128i*)b, (__m128i*)br, 2);
      #else
         return true;
      #endif
      }
      INLINE static bool swap256()
      {
      #if defined(CPPCORE_CPUFEAT_AVX2)
         const size_t LEN = 64;
         CPPCORE_ALIGN32 uint8_t a[LEN]; CPPCORE_ALIGN32 uint8_t ar[LEN];
         CPPCORE_ALIGN32 uint8_t b[LEN]; CPPCORE_ALIGN32 uint8_t br[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = ::rand();  b[i] = ::rand(); }
         CppCore::Memory::copy256((__m256i*)ar, (__m256i*)b, 2);
         CppCore::Memory::copy256((__m256i*)br, (__m256i*)a, 2);
         CppCore::Memory::swap256((__m256i*)a, (__m256i*)b, 2);
         return CppCore::Memory::equal256((__m256i*)a, (__m256i*)ar, 2) && CppCore::Memory::equal256((__m256i*)b, (__m256i*)br, 2);
      #else
         return true;
      #endif
      }
      INLINE static bool swap512()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         const size_t LEN = 128;
         CPPCORE_ALIGN64 uint8_t a[LEN]; CPPCORE_ALIGN64 uint8_t ar[LEN];
         CPPCORE_ALIGN64 uint8_t b[LEN]; CPPCORE_ALIGN64 uint8_t br[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = ::rand();  b[i] = ::rand(); }
         CppCore::Memory::copy512((__m512i*)ar, (__m512i*)b, 2);
         CppCore::Memory::copy512((__m512i*)br, (__m512i*)a, 2);
         CppCore::Memory::swap512((__m512i*)a, (__m512i*)b, 2);
         return CppCore::Memory::equal512((__m512i*)a, (__m512i*)ar, 2) && CppCore::Memory::equal512((__m512i*)b, (__m512i*)br, 2);
      #else
         return true;
      #endif
      }
      INLINE static bool swap()
      {
         const size_t LEN = 128+15;
         CPPCORE_ALIGN16 uint8_t a[LEN]; CPPCORE_ALIGN16 uint8_t ar[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN]; CPPCORE_ALIGN16 uint8_t br[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = ::rand();  b[i] = ::rand(); }
         CppCore::Memory::copy(ar, b, LEN);
         CppCore::Memory::copy(br, a, LEN);
         CppCore::Memory::swap(a, b, LEN);
         return CppCore::Memory::equal(a, ar, LEN) && CppCore::Memory::equal(b, br, LEN);
      }
      INLINE static bool streamswap128()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         const size_t LEN = 32;
         CPPCORE_ALIGN16 uint8_t a[LEN]; CPPCORE_ALIGN16 uint8_t ar[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN]; CPPCORE_ALIGN16 uint8_t br[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = ::rand();  b[i] = ::rand(); }
         CppCore::Memory::copy(ar, b, LEN);
         CppCore::Memory::copy(br, a, LEN);
         CppCore::Memory::streamswap128((__m128i*)a, (__m128i*)b, 2);
         return CppCore::Memory::equal(a, ar, LEN) && CppCore::Memory::equal(b, br, LEN);
      #else
         return true;
      #endif
      }
      INLINE static bool streamswap128x1()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         const size_t LEN = 1024;
         CPPCORE_ALIGN16 uint8_t a[LEN]; CPPCORE_ALIGN16 uint8_t ar[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN]; CPPCORE_ALIGN16 uint8_t br[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = ::rand();  b[i] = ::rand(); }
         CppCore::Memory::copy(ar, b, LEN);
         CppCore::Memory::copy(br, a, LEN);
         CppCore::Memory::streamswap128x1(a, b, 1024);
         return CppCore::Memory::equal(a, ar, LEN) && CppCore::Memory::equal(b, br, LEN);
      #else
         return true;
      #endif
      }
      INLINE static bool streamswap128x2()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         const size_t LEN = 1024;
         CPPCORE_ALIGN16 uint8_t a[LEN]; CPPCORE_ALIGN16 uint8_t ar[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN]; CPPCORE_ALIGN16 uint8_t br[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = ::rand();  b[i] = ::rand(); }
         CppCore::Memory::copy(ar, b, LEN);
         CppCore::Memory::copy(br, a, LEN);
         CppCore::Memory::streamswap128x2(a, b, 1024);
         return CppCore::Memory::equal(a, ar, LEN) && CppCore::Memory::equal(b, br, LEN);
      #else
         return true;
      #endif
      }
      INLINE static bool streamswap128x4()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         const size_t LEN = 1024;
         CPPCORE_ALIGN16 uint8_t a[LEN]; CPPCORE_ALIGN16 uint8_t ar[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN]; CPPCORE_ALIGN16 uint8_t br[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = ::rand();  b[i] = ::rand(); }
         CppCore::Memory::copy(ar, b, LEN);
         CppCore::Memory::copy(br, a, LEN);
         CppCore::Memory::streamswap128x4(a, b, 1024);
         return CppCore::Memory::equal(a, ar, LEN) && CppCore::Memory::equal(b, br, LEN);
      #else
         return true;
      #endif
      }
      INLINE static bool streamswap256()
      {
      #if defined(CPPCORE_CPUFEAT_AVX)
         const size_t LEN = 64;
         CPPCORE_ALIGN32 uint8_t a[LEN]; CPPCORE_ALIGN32 uint8_t ar[LEN];
         CPPCORE_ALIGN32 uint8_t b[LEN]; CPPCORE_ALIGN32 uint8_t br[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = ::rand();  b[i] = ::rand(); }
         CppCore::Memory::copy(ar, b, LEN);
         CppCore::Memory::copy(br, a, LEN);
         CppCore::Memory::streamswap256((__m256i*)a, (__m256i*)b, 2);
         return CppCore::Memory::equal(a, ar, LEN) && CppCore::Memory::equal(b, br, LEN);
      #else
         return true;
      #endif
      }
      INLINE static bool streamswap512()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         const size_t LEN = 128;
         CPPCORE_ALIGN64 uint8_t a[LEN]; CPPCORE_ALIGN64 uint8_t ar[LEN];
         CPPCORE_ALIGN64 uint8_t b[LEN]; CPPCORE_ALIGN64 uint8_t br[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = ::rand();  b[i] = ::rand(); }
         CppCore::Memory::copy(ar, b, LEN);
         CppCore::Memory::copy(br, a, LEN);
         CppCore::Memory::streamswap512((__m512i*)a, (__m512i*)b, 2);
         return CppCore::Memory::equal(a, ar, LEN) && CppCore::Memory::equal(b, br, LEN);
      #else
         return true;
      #endif
      }
      INLINE static bool reverse8()
      {
         const size_t LEN = 127;
         CPPCORE_ALIGN16 uint8_t a[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse8(a, LEN);
         for (size_t i = 0; i < LEN; i++) if (a[i] != b[LEN-1-i]) return false;
         return true;
      }
      INLINE static bool reverse16()
      {
         const size_t LEN = 4;
         CPPCORE_ALIGN16 uint8_t a[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse16((uint16_t*)a, 2);
         for (size_t i = 0; i < LEN; i++) if (a[i] != b[LEN-1-i]) return false;
         const size_t LEN2 = 2;
         for (size_t i = 0; i < LEN2; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse16((uint16_t*)a, 1);
         for (size_t i = 0; i < LEN2; i++) if (a[i] != b[LEN2-1-i]) return false;
         return true;
      }
      INLINE static bool reverse32()
      {
         const size_t LEN = 8;
         CPPCORE_ALIGN16 uint8_t a[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse32((uint32_t*)a, 2);
         for (size_t i = 0; i < LEN; i++) if (a[i] != b[LEN-1-i]) return false;
         const size_t LEN2 = 4;
         for (size_t i = 0; i < LEN2; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse32((uint32_t*)a, 1);
         for (size_t i = 0; i < LEN2; i++) if (a[i] != b[LEN2-1-i]) return false;
         return true;
      }
      INLINE static bool reverse64()
      {
         const size_t LEN = 16;
         CPPCORE_ALIGN16 uint8_t a[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse64((uint64_t*)a, 2);
         for (size_t i = 0; i < LEN; i++) if (a[i] != b[LEN-1-i]) return false;
         const size_t LEN2 = 8;
         for (size_t i = 0; i < LEN2; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse64((uint64_t*)a, 1);
         for (size_t i = 0; i < LEN2; i++) if (a[i] != b[LEN2-1-i]) return false;
         return true;
      }
      INLINE static bool reverse128()
      {
      #if defined(CPPCORE_CPUFEAT_SSSE3)
         const size_t LEN = 32;
         CPPCORE_ALIGN16 uint8_t a[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse128((__m128i*)a, 2);
         for (size_t i = 0; i < LEN; i++) if (a[i] != b[LEN-1-i]) return false;
         const size_t LEN2 = 16;
         for (size_t i = 0; i < LEN2; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse128((__m128i*)a, 1);
         for (size_t i = 0; i < LEN2; i++) if (a[i] != b[LEN2-1-i]) return false;
         return true;
      #else
         return true;
      #endif
      }
      INLINE static bool reverse()
      {
         const size_t LEN = 127;
         CPPCORE_ALIGN16 uint8_t a[LEN];
         CPPCORE_ALIGN16 uint8_t b[LEN];
         for (size_t i = 0; i < LEN; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse(a, LEN);
         for (size_t i = 0; i < LEN; i++) if (a[i] != b[LEN-1-i]) return false;
      #if defined(CPPCORE_CPUFEAT_SSE2)
         const size_t LEN2 = 16;
         for (size_t i = 0; i < LEN2; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse((__m128i*)a, LEN2);
         for (size_t i = 0; i < LEN2; i++) if (a[i] != b[LEN2-1-i]) return false;
         const size_t LEN3 = 1;
         for (size_t i = 0; i < LEN3; i++) { a[i] = b[i] = ::rand(); }
         CppCore::Memory::reverse((__m128i*)a, LEN3);
         for (size_t i = 0; i < LEN3; i++) if (a[i] != b[LEN3-1-i]) return false;
      #endif
         return true;
      }
      INLINE static bool clear()
      {
         const size_t LEN = 128;
         char mem[LEN];
         char zero[LEN];
         ::memset(zero, 0, LEN);
         for (size_t j = 0; j < LEN; j++)
         {
            for (size_t i = 0; i < LEN; i++)
               mem[i] = (char)::rand();
            CppCore::Memory::clear(mem, j);
            if (0 != ::memcmp(mem, zero, j))
               return false;
         }
         return true;
      }
      INLINE static bool zbyteidxf32()
      {
         const char v000[] = { 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v001[] = { '0',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v002[] = { '0',  '1',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v003[] = { '0',  '1',  '2',  0x00, 0x11, 0x11, 0x11, 0x11 };
         const char v004[] = { '0',  '1',  '2',  '3',  0x00, 0x11, 0x11, 0x11 };
         const char v005[] = { '0',  '1',  '2',  '3',  '4',  0x00, 0x11, 0x11 };
         const char v006[] = { '0',  '1',  '2',  '3',  '4',  '5',  0x00, 0x11 };
         const char v007[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  0x00 };
         const bool a =
            CppCore::Memory::zbyteidxf32(v000) == 0U &&
            CppCore::Memory::zbyteidxf32(v001) == 1U &&
            CppCore::Memory::zbyteidxf32(v002) == 2U &&
            CppCore::Memory::zbyteidxf32(v003) == 3U &&
            CppCore::Memory::zbyteidxf32(v004) == 4U &&
            CppCore::Memory::zbyteidxf32(v005) == 5U &&
            CppCore::Memory::zbyteidxf32(v006) == 6U &&
            CppCore::Memory::zbyteidxf32(v007) == 7U;
         const bool b =
            CppCore::Memory::zbyteidxf32((uint32_t*)v000, 2U) == 0U &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v001, 2U) == 1U &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v002, 2U) == 2U &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v003, 2U) == 3U &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v004, 2U) == 4U &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v005, 2U) == 5U &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v006, 2U) == 6U &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v007, 2U) == 7U &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v000, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v001, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v002, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v003, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v004, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v005, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v006, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf32((uint32_t*)v007, 1U) == ::std::numeric_limits<size_t>::max();
         return a && b;
      }
      INLINE static bool byteidxf32()
      {
         const char v000[] = { 0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v001[] = { '0',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v002[] = { '0',  '1',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v003[] = { '0',  '1',  '2',  0x08, 0x11, 0x11, 0x11, 0x11 };
         const char v004[] = { '0',  '1',  '2',  '3',  0x08, 0x11, 0x11, 0x11 };
         const char v005[] = { '0',  '1',  '2',  '3',  '4',  0x08, 0x11, 0x11 };
         const char v006[] = { '0',  '1',  '2',  '3',  '4',  '5',  0x08, 0x11 };
         const char v007[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  0x08 };
         const bool a =
            CppCore::Memory::byteidxf32(v000, 0x08) == 0U &&
            CppCore::Memory::byteidxf32(v001, 0x08) == 1U &&
            CppCore::Memory::byteidxf32(v002, 0x08) == 2U &&
            CppCore::Memory::byteidxf32(v003, 0x08) == 3U &&
            CppCore::Memory::byteidxf32(v004, 0x08) == 4U &&
            CppCore::Memory::byteidxf32(v005, 0x08) == 5U &&
            CppCore::Memory::byteidxf32(v006, 0x08) == 6U &&
            CppCore::Memory::byteidxf32(v007, 0x08) == 7U;
         const bool b =
            CppCore::Memory::byteidxf32((uint32_t*)v000, 0x08, 2U) == 0U &&
            CppCore::Memory::byteidxf32((uint32_t*)v001, 0x08, 2U) == 1U &&
            CppCore::Memory::byteidxf32((uint32_t*)v002, 0x08, 2U) == 2U &&
            CppCore::Memory::byteidxf32((uint32_t*)v003, 0x08, 2U) == 3U &&
            CppCore::Memory::byteidxf32((uint32_t*)v004, 0x08, 2U) == 4U &&
            CppCore::Memory::byteidxf32((uint32_t*)v005, 0x08, 2U) == 5U &&
            CppCore::Memory::byteidxf32((uint32_t*)v006, 0x08, 2U) == 6U &&
            CppCore::Memory::byteidxf32((uint32_t*)v007, 0x08, 2U) == 7U &&
            CppCore::Memory::byteidxf32((uint32_t*)v000, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf32((uint32_t*)v001, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf32((uint32_t*)v002, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf32((uint32_t*)v003, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf32((uint32_t*)v004, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf32((uint32_t*)v005, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf32((uint32_t*)v006, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf32((uint32_t*)v007, 0x08, 1U) == ::std::numeric_limits<size_t>::max();
         return a && b;
      }
      INLINE static bool zbyteidxf64()
      {
         const char v000[] = { 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v001[] = { '0',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v002[] = { '0',  '1',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v003[] = { '0',  '1',  '2',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v004[] = { '0',  '1',  '2',  '3',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v005[] = { '0',  '1',  '2',  '3',  '4',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v006[] = { '0',  '1',  '2',  '3',  '4',  '5',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v007[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v008[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v009[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v010[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v011[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  0x00, 0x11, 0x11, 0x11, 0x11 };
         const char v012[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  0x00, 0x11, 0x11, 0x11 };
         const char v013[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  0x00, 0x11, 0x11 };
         const char v014[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  0x00, 0x11 };
         const char v015[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  0x00 };
         const bool a =
            CppCore::Memory::zbyteidxf64(v000) == 0U  &&
            CppCore::Memory::zbyteidxf64(v001) == 1U  &&
            CppCore::Memory::zbyteidxf64(v002) == 2U  &&
            CppCore::Memory::zbyteidxf64(v003) == 3U  &&
            CppCore::Memory::zbyteidxf64(v004) == 4U  &&
            CppCore::Memory::zbyteidxf64(v005) == 5U  &&
            CppCore::Memory::zbyteidxf64(v006) == 6U  &&
            CppCore::Memory::zbyteidxf64(v007) == 7U  &&
            CppCore::Memory::zbyteidxf64(v008) == 8U  &&
            CppCore::Memory::zbyteidxf64(v009) == 9U  &&
            CppCore::Memory::zbyteidxf64(v010) == 10U &&
            CppCore::Memory::zbyteidxf64(v011) == 11U &&
            CppCore::Memory::zbyteidxf64(v012) == 12U &&
            CppCore::Memory::zbyteidxf64(v013) == 13U &&
            CppCore::Memory::zbyteidxf64(v014) == 14U &&
            CppCore::Memory::zbyteidxf64(v015) == 15U;
         const bool b =
            CppCore::Memory::zbyteidxf64((uint64_t*)v000, 2U) == 0U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v001, 2U) == 1U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v002, 2U) == 2U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v003, 2U) == 3U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v004, 2U) == 4U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v005, 2U) == 5U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v006, 2U) == 6U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v007, 2U) == 7U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v008, 2U) == 8U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v009, 2U) == 9U  &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v010, 2U) == 10U &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v011, 2U) == 11U &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v012, 2U) == 12U &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v013, 2U) == 13U &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v014, 2U) == 14U &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v015, 2U) == 15U &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v000, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v001, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v002, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v003, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v004, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v005, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v006, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v007, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v008, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v009, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v010, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v011, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v012, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v013, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v014, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf64((uint64_t*)v015, 1U) == ::std::numeric_limits<size_t>::max();
         return a && b;
      }
      INLINE static bool byteidxf64()
      {
         const char v000[] = { 0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v001[] = { '0',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v002[] = { '0',  '1',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v003[] = { '0',  '1',  '2',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v004[] = { '0',  '1',  '2',  '3',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v005[] = { '0',  '1',  '2',  '3',  '4',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v006[] = { '0',  '1',  '2',  '3',  '4',  '5',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v007[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v008[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v009[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v010[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v011[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  0x08, 0x11, 0x11, 0x11, 0x11 };
         const char v012[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  0x08, 0x11, 0x11, 0x11 };
         const char v013[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  0x08, 0x11, 0x11 };
         const char v014[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  0x08, 0x11 };
         const char v015[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  0x08 };
         const bool a =
            CppCore::Memory::byteidxf64(v000, 0x08) == 0U  &&
            CppCore::Memory::byteidxf64(v001, 0x08) == 1U  &&
            CppCore::Memory::byteidxf64(v002, 0x08) == 2U  &&
            CppCore::Memory::byteidxf64(v003, 0x08) == 3U  &&
            CppCore::Memory::byteidxf64(v004, 0x08) == 4U  &&
            CppCore::Memory::byteidxf64(v005, 0x08) == 5U  &&
            CppCore::Memory::byteidxf64(v006, 0x08) == 6U  &&
            CppCore::Memory::byteidxf64(v007, 0x08) == 7U  &&
            CppCore::Memory::byteidxf64(v008, 0x08) == 8U  &&
            CppCore::Memory::byteidxf64(v009, 0x08) == 9U  &&
            CppCore::Memory::byteidxf64(v010, 0x08) == 10U &&
            CppCore::Memory::byteidxf64(v011, 0x08) == 11U &&
            CppCore::Memory::byteidxf64(v012, 0x08) == 12U &&
            CppCore::Memory::byteidxf64(v013, 0x08) == 13U &&
            CppCore::Memory::byteidxf64(v014, 0x08) == 14U &&
            CppCore::Memory::byteidxf64(v015, 0x08) == 15U;
         const bool b =
            CppCore::Memory::byteidxf64((uint64_t*)v000, 0x08, 2U) == 0U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v001, 0x08, 2U) == 1U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v002, 0x08, 2U) == 2U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v003, 0x08, 2U) == 3U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v004, 0x08, 2U) == 4U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v005, 0x08, 2U) == 5U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v006, 0x08, 2U) == 6U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v007, 0x08, 2U) == 7U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v008, 0x08, 2U) == 8U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v009, 0x08, 2U) == 9U  &&
            CppCore::Memory::byteidxf64((uint64_t*)v010, 0x08, 2U) == 10U &&
            CppCore::Memory::byteidxf64((uint64_t*)v011, 0x08, 2U) == 11U &&
            CppCore::Memory::byteidxf64((uint64_t*)v012, 0x08, 2U) == 12U &&
            CppCore::Memory::byteidxf64((uint64_t*)v013, 0x08, 2U) == 13U &&
            CppCore::Memory::byteidxf64((uint64_t*)v014, 0x08, 2U) == 14U &&
            CppCore::Memory::byteidxf64((uint64_t*)v015, 0x08, 2U) == 15U &&
            CppCore::Memory::byteidxf64((uint64_t*)v000, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v001, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v002, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v003, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v004, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v005, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v006, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v007, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v008, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v009, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v010, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v011, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v012, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v013, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v014, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf64((uint64_t*)v015, 0x08, 1U) == ::std::numeric_limits<size_t>::max();
         return a && b;
      }
      INLINE static bool zbyteidxf128()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         const char v000[] = { 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v001[] = { '0',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v002[] = { '0',  '1',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v003[] = { '0',  '1',  '2',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v004[] = { '0',  '1',  '2',  '3',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v005[] = { '0',  '1',  '2',  '3',  '4',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v006[] = { '0',  '1',  '2',  '3',  '4',  '5',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v007[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v008[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v009[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v010[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v011[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v012[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v013[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v014[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v015[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v016[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v017[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v018[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v019[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v020[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v021[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v022[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v023[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v024[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v025[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v026[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v027[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  0x00, 0x11, 0x11, 0x11, 0x11 };
         const char v028[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  0x00, 0x11, 0x11, 0x11 };
         const char v029[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  0x00, 0x11, 0x11 };
         const char v030[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  0x00, 0x11 };
         const char v031[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  0x00 };
         const bool a =
            CppCore::Memory::zbyteidxf128(v000) == 0U  &&
            CppCore::Memory::zbyteidxf128(v001) == 1U  &&
            CppCore::Memory::zbyteidxf128(v002) == 2U  &&
            CppCore::Memory::zbyteidxf128(v003) == 3U  &&
            CppCore::Memory::zbyteidxf128(v004) == 4U  &&
            CppCore::Memory::zbyteidxf128(v005) == 5U  &&
            CppCore::Memory::zbyteidxf128(v006) == 6U  &&
            CppCore::Memory::zbyteidxf128(v007) == 7U  &&
            CppCore::Memory::zbyteidxf128(v008) == 8U  &&
            CppCore::Memory::zbyteidxf128(v009) == 9U  &&
            CppCore::Memory::zbyteidxf128(v010) == 10U &&
            CppCore::Memory::zbyteidxf128(v011) == 11U &&
            CppCore::Memory::zbyteidxf128(v012) == 12U &&
            CppCore::Memory::zbyteidxf128(v013) == 13U &&
            CppCore::Memory::zbyteidxf128(v014) == 14U &&
            CppCore::Memory::zbyteidxf128(v015) == 15U &&
            CppCore::Memory::zbyteidxf128(v016) == 16U &&
            CppCore::Memory::zbyteidxf128(v017) == 17U &&
            CppCore::Memory::zbyteidxf128(v018) == 18U &&
            CppCore::Memory::zbyteidxf128(v019) == 19U &&
            CppCore::Memory::zbyteidxf128(v020) == 20U &&
            CppCore::Memory::zbyteidxf128(v021) == 21U &&
            CppCore::Memory::zbyteidxf128(v022) == 22U &&
            CppCore::Memory::zbyteidxf128(v023) == 23U &&
            CppCore::Memory::zbyteidxf128(v024) == 24U &&
            CppCore::Memory::zbyteidxf128(v025) == 25U &&
            CppCore::Memory::zbyteidxf128(v026) == 26U &&
            CppCore::Memory::zbyteidxf128(v027) == 27U &&
            CppCore::Memory::zbyteidxf128(v028) == 28U &&
            CppCore::Memory::zbyteidxf128(v029) == 29U &&
            CppCore::Memory::zbyteidxf128(v030) == 30U &&
            CppCore::Memory::zbyteidxf128(v031) == 31U;
         const bool b = 
            CppCore::Memory::zbyteidxf128(v000, 2U) == 0U  &&
            CppCore::Memory::zbyteidxf128(v001, 2U) == 1U  &&
            CppCore::Memory::zbyteidxf128(v002, 2U) == 2U  &&
            CppCore::Memory::zbyteidxf128(v003, 2U) == 3U  &&
            CppCore::Memory::zbyteidxf128(v004, 2U) == 4U  &&
            CppCore::Memory::zbyteidxf128(v005, 2U) == 5U  &&
            CppCore::Memory::zbyteidxf128(v006, 2U) == 6U  &&
            CppCore::Memory::zbyteidxf128(v007, 2U) == 7U  &&
            CppCore::Memory::zbyteidxf128(v008, 2U) == 8U  &&
            CppCore::Memory::zbyteidxf128(v009, 2U) == 9U  &&
            CppCore::Memory::zbyteidxf128(v010, 2U) == 10U &&
            CppCore::Memory::zbyteidxf128(v011, 2U) == 11U &&
            CppCore::Memory::zbyteidxf128(v012, 2U) == 12U &&
            CppCore::Memory::zbyteidxf128(v013, 2U) == 13U &&
            CppCore::Memory::zbyteidxf128(v014, 2U) == 14U &&
            CppCore::Memory::zbyteidxf128(v015, 2U) == 15U &&
            CppCore::Memory::zbyteidxf128(v016, 2U) == 16U &&
            CppCore::Memory::zbyteidxf128(v017, 2U) == 17U &&
            CppCore::Memory::zbyteidxf128(v018, 2U) == 18U &&
            CppCore::Memory::zbyteidxf128(v019, 2U) == 19U &&
            CppCore::Memory::zbyteidxf128(v020, 2U) == 20U &&
            CppCore::Memory::zbyteidxf128(v021, 2U) == 21U &&
            CppCore::Memory::zbyteidxf128(v022, 2U) == 22U &&
            CppCore::Memory::zbyteidxf128(v023, 2U) == 23U &&
            CppCore::Memory::zbyteidxf128(v024, 2U) == 24U &&
            CppCore::Memory::zbyteidxf128(v025, 2U) == 25U &&
            CppCore::Memory::zbyteidxf128(v026, 2U) == 26U &&
            CppCore::Memory::zbyteidxf128(v027, 2U) == 27U &&
            CppCore::Memory::zbyteidxf128(v028, 2U) == 28U &&
            CppCore::Memory::zbyteidxf128(v029, 2U) == 29U &&
            CppCore::Memory::zbyteidxf128(v030, 2U) == 30U &&
            CppCore::Memory::zbyteidxf128(v031, 2U) == 31U &&
            CppCore::Memory::zbyteidxf128(v000, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v001, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v002, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v003, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v004, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v005, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v006, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v007, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v008, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v009, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v010, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v011, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v012, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v013, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v014, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v015, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v016, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v017, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v018, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v019, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v020, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v021, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v022, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v023, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v024, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v025, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v026, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v027, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v028, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v029, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v030, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf128(v031, 1U) == ::std::numeric_limits<size_t>::max();
         return a && b;
      #else
         return true;
      #endif
      }
      INLINE static bool byteidxf128()
      {
      #if defined(CPPCORE_CPUFEAT_SSE2)
         const char v000[] = { 0x08, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v001[] = { '0',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v002[] = { '0',  '1',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v003[] = { '0',  '1',  '2',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v004[] = { '0',  '1',  '2',  '3',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v005[] = { '0',  '1',  '2',  '3',  '4',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v006[] = { '0',  '1',  '2',  '3',  '4',  '5',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v007[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v008[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v009[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v010[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v011[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v012[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v013[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v014[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v015[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v016[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v017[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v018[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v019[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v020[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v021[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v022[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v023[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v024[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v025[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v026[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v027[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  0x08, 0x11, 0x11, 0x11, 0x11 };
         const char v028[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  0x08, 0x11, 0x11, 0x11 };
         const char v029[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  0x08, 0x11, 0x11 };
         const char v030[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  0x08, 0x11 };
         const char v031[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  0x08 };
         const bool a =
            CppCore::Memory::byteidxf128(v000, 0x08) == 0U  &&
            CppCore::Memory::byteidxf128(v001, 0x08) == 1U  &&
            CppCore::Memory::byteidxf128(v002, 0x08) == 2U  &&
            CppCore::Memory::byteidxf128(v003, 0x08) == 3U  &&
            CppCore::Memory::byteidxf128(v004, 0x08) == 4U  &&
            CppCore::Memory::byteidxf128(v005, 0x08) == 5U  &&
            CppCore::Memory::byteidxf128(v006, 0x08) == 6U  &&
            CppCore::Memory::byteidxf128(v007, 0x08) == 7U  &&
            CppCore::Memory::byteidxf128(v008, 0x08) == 8U  &&
            CppCore::Memory::byteidxf128(v009, 0x08) == 9U  &&
            CppCore::Memory::byteidxf128(v010, 0x08) == 10U &&
            CppCore::Memory::byteidxf128(v011, 0x08) == 11U &&
            CppCore::Memory::byteidxf128(v012, 0x08) == 12U &&
            CppCore::Memory::byteidxf128(v013, 0x08) == 13U &&
            CppCore::Memory::byteidxf128(v014, 0x08) == 14U &&
            CppCore::Memory::byteidxf128(v015, 0x08) == 15U &&
            CppCore::Memory::byteidxf128(v016, 0x08) == 16U &&
            CppCore::Memory::byteidxf128(v017, 0x08) == 17U &&
            CppCore::Memory::byteidxf128(v018, 0x08) == 18U &&
            CppCore::Memory::byteidxf128(v019, 0x08) == 19U &&
            CppCore::Memory::byteidxf128(v020, 0x08) == 20U &&
            CppCore::Memory::byteidxf128(v021, 0x08) == 21U &&
            CppCore::Memory::byteidxf128(v022, 0x08) == 22U &&
            CppCore::Memory::byteidxf128(v023, 0x08) == 23U &&
            CppCore::Memory::byteidxf128(v024, 0x08) == 24U &&
            CppCore::Memory::byteidxf128(v025, 0x08) == 25U &&
            CppCore::Memory::byteidxf128(v026, 0x08) == 26U &&
            CppCore::Memory::byteidxf128(v027, 0x08) == 27U &&
            CppCore::Memory::byteidxf128(v028, 0x08) == 28U &&
            CppCore::Memory::byteidxf128(v029, 0x08) == 29U &&
            CppCore::Memory::byteidxf128(v030, 0x08) == 30U &&
            CppCore::Memory::byteidxf128(v031, 0x08) == 31U;
         const bool b = 
            CppCore::Memory::byteidxf128(v000, 0x08, 2U) == 0U  &&
            CppCore::Memory::byteidxf128(v001, 0x08, 2U) == 1U  &&
            CppCore::Memory::byteidxf128(v002, 0x08, 2U) == 2U  &&
            CppCore::Memory::byteidxf128(v003, 0x08, 2U) == 3U  &&
            CppCore::Memory::byteidxf128(v004, 0x08, 2U) == 4U  &&
            CppCore::Memory::byteidxf128(v005, 0x08, 2U) == 5U  &&
            CppCore::Memory::byteidxf128(v006, 0x08, 2U) == 6U  &&
            CppCore::Memory::byteidxf128(v007, 0x08, 2U) == 7U  &&
            CppCore::Memory::byteidxf128(v008, 0x08, 2U) == 8U  &&
            CppCore::Memory::byteidxf128(v009, 0x08, 2U) == 9U  &&
            CppCore::Memory::byteidxf128(v010, 0x08, 2U) == 10U &&
            CppCore::Memory::byteidxf128(v011, 0x08, 2U) == 11U &&
            CppCore::Memory::byteidxf128(v012, 0x08, 2U) == 12U &&
            CppCore::Memory::byteidxf128(v013, 0x08, 2U) == 13U &&
            CppCore::Memory::byteidxf128(v014, 0x08, 2U) == 14U &&
            CppCore::Memory::byteidxf128(v015, 0x08, 2U) == 15U &&
            CppCore::Memory::byteidxf128(v016, 0x08, 2U) == 16U &&
            CppCore::Memory::byteidxf128(v017, 0x08, 2U) == 17U &&
            CppCore::Memory::byteidxf128(v018, 0x08, 2U) == 18U &&
            CppCore::Memory::byteidxf128(v019, 0x08, 2U) == 19U &&
            CppCore::Memory::byteidxf128(v020, 0x08, 2U) == 20U &&
            CppCore::Memory::byteidxf128(v021, 0x08, 2U) == 21U &&
            CppCore::Memory::byteidxf128(v022, 0x08, 2U) == 22U &&
            CppCore::Memory::byteidxf128(v023, 0x08, 2U) == 23U &&
            CppCore::Memory::byteidxf128(v024, 0x08, 2U) == 24U &&
            CppCore::Memory::byteidxf128(v025, 0x08, 2U) == 25U &&
            CppCore::Memory::byteidxf128(v026, 0x08, 2U) == 26U &&
            CppCore::Memory::byteidxf128(v027, 0x08, 2U) == 27U &&
            CppCore::Memory::byteidxf128(v028, 0x08, 2U) == 28U &&
            CppCore::Memory::byteidxf128(v029, 0x08, 2U) == 29U &&
            CppCore::Memory::byteidxf128(v030, 0x08, 2U) == 30U &&
            CppCore::Memory::byteidxf128(v031, 0x08, 2U) == 31U &&
            CppCore::Memory::byteidxf128(v000, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v001, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v002, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v003, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v004, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v005, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v006, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v007, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v008, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v009, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v010, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v011, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v012, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v013, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v014, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v015, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v016, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v017, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v018, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v019, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v020, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v021, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v022, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v023, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v024, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v025, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v026, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v027, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v028, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v029, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v030, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf128(v031, 0x08, 1U) == ::std::numeric_limits<size_t>::max();
         return a && b;
      #else
         return true;
      #endif
      }
      INLINE static bool zbyteidxf256()
      {
      #if defined(CPPCORE_CPUFEAT_AVX2)
         const char v000[] = { 0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v001[] = { '0',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v002[] = { '0',  '1',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v003[] = { '0',  '1',  '2',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v004[] = { '0',  '1',  '2',  '3',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v005[] = { '0',  '1',  '2',  '3',  '4',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v006[] = { '0',  '1',  '2',  '3',  '4',  '5',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v007[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v008[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v009[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v010[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v011[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v012[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v013[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v014[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v015[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v016[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v017[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v018[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v019[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v020[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v021[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v022[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v023[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v024[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v025[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v026[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v027[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  0x00, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v028[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  0x00, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v029[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  0x00, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v030[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  0x00, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v031[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  0x00,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v032[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v033[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v034[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v035[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v036[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v037[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v038[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v039[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v040[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v041[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v042[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v043[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v044[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v045[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v046[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v047[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v048[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v049[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v050[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v051[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v052[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v053[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v054[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v055[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v056[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v057[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v058[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'w',  0x00, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v059[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  0x00, 0x11, 0x11, 0x11, 0x11 };
         const char v060[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  'x',  0x00, 0x11, 0x11, 0x11 };
         const char v061[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  'x',  'y',  0x00, 0x11, 0x11 };
         const char v062[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  'x',  'y',  'z',  0x00, 0x11 };
         const char v063[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  'x',  'y',  'z',  '!',  0x00 };
         const bool a =
            CppCore::Memory::zbyteidxf256(v000) == 0U  && CppCore::Memory::zbyteidxf256(v001) == 1U  &&
            CppCore::Memory::zbyteidxf256(v002) == 2U  && CppCore::Memory::zbyteidxf256(v003) == 3U  &&
            CppCore::Memory::zbyteidxf256(v004) == 4U  && CppCore::Memory::zbyteidxf256(v005) == 5U  &&
            CppCore::Memory::zbyteidxf256(v006) == 6U  && CppCore::Memory::zbyteidxf256(v007) == 7U  &&
            CppCore::Memory::zbyteidxf256(v008) == 8U  && CppCore::Memory::zbyteidxf256(v009) == 9U  &&
            CppCore::Memory::zbyteidxf256(v010) == 10U && CppCore::Memory::zbyteidxf256(v011) == 11U &&
            CppCore::Memory::zbyteidxf256(v012) == 12U && CppCore::Memory::zbyteidxf256(v013) == 13U &&
            CppCore::Memory::zbyteidxf256(v014) == 14U && CppCore::Memory::zbyteidxf256(v015) == 15U &&
            CppCore::Memory::zbyteidxf256(v016) == 16U && CppCore::Memory::zbyteidxf256(v017) == 17U &&
            CppCore::Memory::zbyteidxf256(v018) == 18U && CppCore::Memory::zbyteidxf256(v019) == 19U &&
            CppCore::Memory::zbyteidxf256(v020) == 20U && CppCore::Memory::zbyteidxf256(v021) == 21U &&
            CppCore::Memory::zbyteidxf256(v022) == 22U && CppCore::Memory::zbyteidxf256(v023) == 23U &&
            CppCore::Memory::zbyteidxf256(v024) == 24U && CppCore::Memory::zbyteidxf256(v025) == 25U &&
            CppCore::Memory::zbyteidxf256(v026) == 26U && CppCore::Memory::zbyteidxf256(v027) == 27U &&
            CppCore::Memory::zbyteidxf256(v028) == 28U && CppCore::Memory::zbyteidxf256(v029) == 29U &&
            CppCore::Memory::zbyteidxf256(v030) == 30U && CppCore::Memory::zbyteidxf256(v031) == 31U &&
            CppCore::Memory::zbyteidxf256(v032) == 32U && CppCore::Memory::zbyteidxf256(v033) == 33U &&
            CppCore::Memory::zbyteidxf256(v034) == 34U && CppCore::Memory::zbyteidxf256(v035) == 35U &&
            CppCore::Memory::zbyteidxf256(v036) == 36U && CppCore::Memory::zbyteidxf256(v037) == 37U &&
            CppCore::Memory::zbyteidxf256(v038) == 38U && CppCore::Memory::zbyteidxf256(v039) == 39U &&
            CppCore::Memory::zbyteidxf256(v040) == 40U && CppCore::Memory::zbyteidxf256(v041) == 41U &&
            CppCore::Memory::zbyteidxf256(v042) == 42U && CppCore::Memory::zbyteidxf256(v043) == 43U &&
            CppCore::Memory::zbyteidxf256(v044) == 44U && CppCore::Memory::zbyteidxf256(v045) == 45U &&
            CppCore::Memory::zbyteidxf256(v046) == 46U && CppCore::Memory::zbyteidxf256(v047) == 47U &&
            CppCore::Memory::zbyteidxf256(v048) == 48U && CppCore::Memory::zbyteidxf256(v049) == 49U &&
            CppCore::Memory::zbyteidxf256(v050) == 50U && CppCore::Memory::zbyteidxf256(v051) == 51U &&
            CppCore::Memory::zbyteidxf256(v052) == 52U && CppCore::Memory::zbyteidxf256(v053) == 53U &&
            CppCore::Memory::zbyteidxf256(v054) == 54U && CppCore::Memory::zbyteidxf256(v055) == 55U &&
            CppCore::Memory::zbyteidxf256(v056) == 56U && CppCore::Memory::zbyteidxf256(v057) == 57U &&
            CppCore::Memory::zbyteidxf256(v058) == 58U && CppCore::Memory::zbyteidxf256(v059) == 59U &&
            CppCore::Memory::zbyteidxf256(v060) == 60U && CppCore::Memory::zbyteidxf256(v061) == 61U &&
            CppCore::Memory::zbyteidxf256(v062) == 62U && CppCore::Memory::zbyteidxf256(v063) == 63U;
         const bool b = 
            CppCore::Memory::zbyteidxf256(v000, 2U) == 0U  && CppCore::Memory::zbyteidxf256(v001, 2U) == 1U  &&
            CppCore::Memory::zbyteidxf256(v002, 2U) == 2U  && CppCore::Memory::zbyteidxf256(v003, 2U) == 3U  &&
            CppCore::Memory::zbyteidxf256(v004, 2U) == 4U  && CppCore::Memory::zbyteidxf256(v005, 2U) == 5U  &&
            CppCore::Memory::zbyteidxf256(v006, 2U) == 6U  && CppCore::Memory::zbyteidxf256(v007, 2U) == 7U  &&
            CppCore::Memory::zbyteidxf256(v008, 2U) == 8U  && CppCore::Memory::zbyteidxf256(v009, 2U) == 9U  &&
            CppCore::Memory::zbyteidxf256(v010, 2U) == 10U && CppCore::Memory::zbyteidxf256(v011, 2U) == 11U &&
            CppCore::Memory::zbyteidxf256(v012, 2U) == 12U && CppCore::Memory::zbyteidxf256(v013, 2U) == 13U &&
            CppCore::Memory::zbyteidxf256(v014, 2U) == 14U && CppCore::Memory::zbyteidxf256(v015, 2U) == 15U &&
            CppCore::Memory::zbyteidxf256(v016, 2U) == 16U && CppCore::Memory::zbyteidxf256(v017, 2U) == 17U &&
            CppCore::Memory::zbyteidxf256(v018, 2U) == 18U && CppCore::Memory::zbyteidxf256(v019, 2U) == 19U &&
            CppCore::Memory::zbyteidxf256(v020, 2U) == 20U && CppCore::Memory::zbyteidxf256(v021, 2U) == 21U &&
            CppCore::Memory::zbyteidxf256(v022, 2U) == 22U && CppCore::Memory::zbyteidxf256(v023, 2U) == 23U &&
            CppCore::Memory::zbyteidxf256(v024, 2U) == 24U && CppCore::Memory::zbyteidxf256(v025, 2U) == 25U &&
            CppCore::Memory::zbyteidxf256(v026, 2U) == 26U && CppCore::Memory::zbyteidxf256(v027, 2U) == 27U &&
            CppCore::Memory::zbyteidxf256(v028, 2U) == 28U && CppCore::Memory::zbyteidxf256(v029, 2U) == 29U &&
            CppCore::Memory::zbyteidxf256(v030, 2U) == 30U && CppCore::Memory::zbyteidxf256(v031, 2U) == 31U &&
            CppCore::Memory::zbyteidxf256(v032, 2U) == 32U && CppCore::Memory::zbyteidxf256(v033, 2U) == 33U &&
            CppCore::Memory::zbyteidxf256(v034, 2U) == 34U && CppCore::Memory::zbyteidxf256(v035, 2U) == 35U &&
            CppCore::Memory::zbyteidxf256(v036, 2U) == 36U && CppCore::Memory::zbyteidxf256(v037, 2U) == 37U &&
            CppCore::Memory::zbyteidxf256(v038, 2U) == 38U && CppCore::Memory::zbyteidxf256(v039, 2U) == 39U &&
            CppCore::Memory::zbyteidxf256(v040, 2U) == 40U && CppCore::Memory::zbyteidxf256(v041, 2U) == 41U &&
            CppCore::Memory::zbyteidxf256(v042, 2U) == 42U && CppCore::Memory::zbyteidxf256(v043, 2U) == 43U &&
            CppCore::Memory::zbyteidxf256(v044, 2U) == 44U && CppCore::Memory::zbyteidxf256(v045, 2U) == 45U &&
            CppCore::Memory::zbyteidxf256(v046, 2U) == 46U && CppCore::Memory::zbyteidxf256(v047, 2U) == 47U &&
            CppCore::Memory::zbyteidxf256(v048, 2U) == 48U && CppCore::Memory::zbyteidxf256(v049, 2U) == 49U &&
            CppCore::Memory::zbyteidxf256(v050, 2U) == 50U && CppCore::Memory::zbyteidxf256(v051, 2U) == 51U &&
            CppCore::Memory::zbyteidxf256(v052, 2U) == 52U && CppCore::Memory::zbyteidxf256(v053, 2U) == 53U &&
            CppCore::Memory::zbyteidxf256(v054, 2U) == 54U && CppCore::Memory::zbyteidxf256(v055, 2U) == 55U &&
            CppCore::Memory::zbyteidxf256(v056, 2U) == 56U && CppCore::Memory::zbyteidxf256(v057, 2U) == 57U &&
            CppCore::Memory::zbyteidxf256(v058, 2U) == 58U && CppCore::Memory::zbyteidxf256(v059, 2U) == 59U &&
            CppCore::Memory::zbyteidxf256(v060, 2U) == 60U && CppCore::Memory::zbyteidxf256(v061, 2U) == 61U &&
            CppCore::Memory::zbyteidxf256(v062, 2U) == 62U && CppCore::Memory::zbyteidxf256(v063, 2U) == 63U &&
            CppCore::Memory::zbyteidxf256(v000, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v001, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v002, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v003, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v004, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v005, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v006, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v007, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v008, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v009, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v010, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v011, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v012, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v013, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v014, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v015, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v016, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v017, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v018, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v019, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v020, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v021, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v022, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v023, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v024, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v025, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v026, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v027, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v028, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v029, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v030, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v031, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v032, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v033, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v034, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v035, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v036, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v037, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v038, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v039, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v040, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v041, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v042, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v043, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v044, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v045, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v046, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v047, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v048, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v049, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v050, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v051, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v052, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v053, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v054, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v055, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v056, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v057, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v058, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v059, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v060, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v061, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v062, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::zbyteidxf256(v063, 1U) == ::std::numeric_limits<size_t>::max();
         return a && b;
      #else
         return true;
      #endif
      }
      INLINE static bool byteidxf256()
      {
      #if defined(CPPCORE_CPUFEAT_AVX2)
         const char v000[] = { 0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v001[] = { '0',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v002[] = { '0',  '1',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v003[] = { '0',  '1',  '2',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v004[] = { '0',  '1',  '2',  '3',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v005[] = { '0',  '1',  '2',  '3',  '4',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v006[] = { '0',  '1',  '2',  '3',  '4',  '5',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v007[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v008[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v009[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v010[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v011[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v012[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v013[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v014[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v015[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v016[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v017[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v018[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v019[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v020[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v021[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v022[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v023[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v024[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v025[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v026[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v027[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  0x08, 0x11, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v028[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  0x08, 0x11, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v029[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  0x08, 0x11, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v030[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  0x08, 0x11,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v031[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  0x08,
                               0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v032[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v033[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v034[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v035[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v036[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v037[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v038[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v039[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v040[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v041[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v042[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v043[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v044[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v045[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v046[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v047[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v048[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v049[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v050[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v051[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v052[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v053[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v054[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v055[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v056[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v057[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v058[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'w',  0x08, 0x11, 0x11, 0x11, 0x11, 0x11 };
         const char v059[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  0x08, 0x11, 0x11, 0x11, 0x11 };
         const char v060[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  'x',  0x08, 0x11, 0x11, 0x11 };
         const char v061[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  'x',  'y',  0x08, 0x11, 0x11 };
         const char v062[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  'x',  'y',  'z',  0x08, 0x11 };
         const char v063[] = { '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  '8',  '9',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  'P',  'Q',  'R',  'S',  'T',  'U',  'V',
                               'W',  'X',  'Y',  'Z',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  'x',  'y',  'z',  '!',  0x08 };
         const bool a =
            CppCore::Memory::byteidxf256(v000, 0x08) == 0U  && CppCore::Memory::byteidxf256(v001, 0x08) == 1U  &&
            CppCore::Memory::byteidxf256(v002, 0x08) == 2U  && CppCore::Memory::byteidxf256(v003, 0x08) == 3U  &&
            CppCore::Memory::byteidxf256(v004, 0x08) == 4U  && CppCore::Memory::byteidxf256(v005, 0x08) == 5U  &&
            CppCore::Memory::byteidxf256(v006, 0x08) == 6U  && CppCore::Memory::byteidxf256(v007, 0x08) == 7U  &&
            CppCore::Memory::byteidxf256(v008, 0x08) == 8U  && CppCore::Memory::byteidxf256(v009, 0x08) == 9U  &&
            CppCore::Memory::byteidxf256(v010, 0x08) == 10U && CppCore::Memory::byteidxf256(v011, 0x08) == 11U &&
            CppCore::Memory::byteidxf256(v012, 0x08) == 12U && CppCore::Memory::byteidxf256(v013, 0x08) == 13U &&
            CppCore::Memory::byteidxf256(v014, 0x08) == 14U && CppCore::Memory::byteidxf256(v015, 0x08) == 15U &&
            CppCore::Memory::byteidxf256(v016, 0x08) == 16U && CppCore::Memory::byteidxf256(v017, 0x08) == 17U &&
            CppCore::Memory::byteidxf256(v018, 0x08) == 18U && CppCore::Memory::byteidxf256(v019, 0x08) == 19U &&
            CppCore::Memory::byteidxf256(v020, 0x08) == 20U && CppCore::Memory::byteidxf256(v021, 0x08) == 21U &&
            CppCore::Memory::byteidxf256(v022, 0x08) == 22U && CppCore::Memory::byteidxf256(v023, 0x08) == 23U &&
            CppCore::Memory::byteidxf256(v024, 0x08) == 24U && CppCore::Memory::byteidxf256(v025, 0x08) == 25U &&
            CppCore::Memory::byteidxf256(v026, 0x08) == 26U && CppCore::Memory::byteidxf256(v027, 0x08) == 27U &&
            CppCore::Memory::byteidxf256(v028, 0x08) == 28U && CppCore::Memory::byteidxf256(v029, 0x08) == 29U &&
            CppCore::Memory::byteidxf256(v030, 0x08) == 30U && CppCore::Memory::byteidxf256(v031, 0x08) == 31U &&
            CppCore::Memory::byteidxf256(v032, 0x08) == 32U && CppCore::Memory::byteidxf256(v033, 0x08) == 33U &&
            CppCore::Memory::byteidxf256(v034, 0x08) == 34U && CppCore::Memory::byteidxf256(v035, 0x08) == 35U &&
            CppCore::Memory::byteidxf256(v036, 0x08) == 36U && CppCore::Memory::byteidxf256(v037, 0x08) == 37U &&
            CppCore::Memory::byteidxf256(v038, 0x08) == 38U && CppCore::Memory::byteidxf256(v039, 0x08) == 39U &&
            CppCore::Memory::byteidxf256(v040, 0x08) == 40U && CppCore::Memory::byteidxf256(v041, 0x08) == 41U &&
            CppCore::Memory::byteidxf256(v042, 0x08) == 42U && CppCore::Memory::byteidxf256(v043, 0x08) == 43U &&
            CppCore::Memory::byteidxf256(v044, 0x08) == 44U && CppCore::Memory::byteidxf256(v045, 0x08) == 45U &&
            CppCore::Memory::byteidxf256(v046, 0x08) == 46U && CppCore::Memory::byteidxf256(v047, 0x08) == 47U &&
            CppCore::Memory::byteidxf256(v048, 0x08) == 48U && CppCore::Memory::byteidxf256(v049, 0x08) == 49U &&
            CppCore::Memory::byteidxf256(v050, 0x08) == 50U && CppCore::Memory::byteidxf256(v051, 0x08) == 51U &&
            CppCore::Memory::byteidxf256(v052, 0x08) == 52U && CppCore::Memory::byteidxf256(v053, 0x08) == 53U &&
            CppCore::Memory::byteidxf256(v054, 0x08) == 54U && CppCore::Memory::byteidxf256(v055, 0x08) == 55U &&
            CppCore::Memory::byteidxf256(v056, 0x08) == 56U && CppCore::Memory::byteidxf256(v057, 0x08) == 57U &&
            CppCore::Memory::byteidxf256(v058, 0x08) == 58U && CppCore::Memory::byteidxf256(v059, 0x08) == 59U &&
            CppCore::Memory::byteidxf256(v060, 0x08) == 60U && CppCore::Memory::byteidxf256(v061, 0x08) == 61U &&
            CppCore::Memory::byteidxf256(v062, 0x08) == 62U && CppCore::Memory::byteidxf256(v063, 0x08) == 63U;
         const bool b = 
            CppCore::Memory::byteidxf256(v000, 0x08, 2U) == 0U  && CppCore::Memory::byteidxf256(v001, 0x08, 2U) == 1U  &&
            CppCore::Memory::byteidxf256(v002, 0x08, 2U) == 2U  && CppCore::Memory::byteidxf256(v003, 0x08, 2U) == 3U  &&
            CppCore::Memory::byteidxf256(v004, 0x08, 2U) == 4U  && CppCore::Memory::byteidxf256(v005, 0x08, 2U) == 5U  &&
            CppCore::Memory::byteidxf256(v006, 0x08, 2U) == 6U  && CppCore::Memory::byteidxf256(v007, 0x08, 2U) == 7U  &&
            CppCore::Memory::byteidxf256(v008, 0x08, 2U) == 8U  && CppCore::Memory::byteidxf256(v009, 0x08, 2U) == 9U  &&
            CppCore::Memory::byteidxf256(v010, 0x08, 2U) == 10U && CppCore::Memory::byteidxf256(v011, 0x08, 2U) == 11U &&
            CppCore::Memory::byteidxf256(v012, 0x08, 2U) == 12U && CppCore::Memory::byteidxf256(v013, 0x08, 2U) == 13U &&
            CppCore::Memory::byteidxf256(v014, 0x08, 2U) == 14U && CppCore::Memory::byteidxf256(v015, 0x08, 2U) == 15U &&
            CppCore::Memory::byteidxf256(v016, 0x08, 2U) == 16U && CppCore::Memory::byteidxf256(v017, 0x08, 2U) == 17U &&
            CppCore::Memory::byteidxf256(v018, 0x08, 2U) == 18U && CppCore::Memory::byteidxf256(v019, 0x08, 2U) == 19U &&
            CppCore::Memory::byteidxf256(v020, 0x08, 2U) == 20U && CppCore::Memory::byteidxf256(v021, 0x08, 2U) == 21U &&
            CppCore::Memory::byteidxf256(v022, 0x08, 2U) == 22U && CppCore::Memory::byteidxf256(v023, 0x08, 2U) == 23U &&
            CppCore::Memory::byteidxf256(v024, 0x08, 2U) == 24U && CppCore::Memory::byteidxf256(v025, 0x08, 2U) == 25U &&
            CppCore::Memory::byteidxf256(v026, 0x08, 2U) == 26U && CppCore::Memory::byteidxf256(v027, 0x08, 2U) == 27U &&
            CppCore::Memory::byteidxf256(v028, 0x08, 2U) == 28U && CppCore::Memory::byteidxf256(v029, 0x08, 2U) == 29U &&
            CppCore::Memory::byteidxf256(v030, 0x08, 2U) == 30U && CppCore::Memory::byteidxf256(v031, 0x08, 2U) == 31U &&
            CppCore::Memory::byteidxf256(v032, 0x08, 2U) == 32U && CppCore::Memory::byteidxf256(v033, 0x08, 2U) == 33U &&
            CppCore::Memory::byteidxf256(v034, 0x08, 2U) == 34U && CppCore::Memory::byteidxf256(v035, 0x08, 2U) == 35U &&
            CppCore::Memory::byteidxf256(v036, 0x08, 2U) == 36U && CppCore::Memory::byteidxf256(v037, 0x08, 2U) == 37U &&
            CppCore::Memory::byteidxf256(v038, 0x08, 2U) == 38U && CppCore::Memory::byteidxf256(v039, 0x08, 2U) == 39U &&
            CppCore::Memory::byteidxf256(v040, 0x08, 2U) == 40U && CppCore::Memory::byteidxf256(v041, 0x08, 2U) == 41U &&
            CppCore::Memory::byteidxf256(v042, 0x08, 2U) == 42U && CppCore::Memory::byteidxf256(v043, 0x08, 2U) == 43U &&
            CppCore::Memory::byteidxf256(v044, 0x08, 2U) == 44U && CppCore::Memory::byteidxf256(v045, 0x08, 2U) == 45U &&
            CppCore::Memory::byteidxf256(v046, 0x08, 2U) == 46U && CppCore::Memory::byteidxf256(v047, 0x08, 2U) == 47U &&
            CppCore::Memory::byteidxf256(v048, 0x08, 2U) == 48U && CppCore::Memory::byteidxf256(v049, 0x08, 2U) == 49U &&
            CppCore::Memory::byteidxf256(v050, 0x08, 2U) == 50U && CppCore::Memory::byteidxf256(v051, 0x08, 2U) == 51U &&
            CppCore::Memory::byteidxf256(v052, 0x08, 2U) == 52U && CppCore::Memory::byteidxf256(v053, 0x08, 2U) == 53U &&
            CppCore::Memory::byteidxf256(v054, 0x08, 2U) == 54U && CppCore::Memory::byteidxf256(v055, 0x08, 2U) == 55U &&
            CppCore::Memory::byteidxf256(v056, 0x08, 2U) == 56U && CppCore::Memory::byteidxf256(v057, 0x08, 2U) == 57U &&
            CppCore::Memory::byteidxf256(v058, 0x08, 2U) == 58U && CppCore::Memory::byteidxf256(v059, 0x08, 2U) == 59U &&
            CppCore::Memory::byteidxf256(v060, 0x08, 2U) == 60U && CppCore::Memory::byteidxf256(v061, 0x08, 2U) == 61U &&
            CppCore::Memory::byteidxf256(v062, 0x08, 2U) == 62U && CppCore::Memory::byteidxf256(v063, 0x08, 2U) == 63U &&
            CppCore::Memory::byteidxf256(v000, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v001, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v002, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v003, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v004, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v005, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v006, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v007, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v008, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v009, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v010, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v011, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v012, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v013, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v014, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v015, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v016, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v017, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v018, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v019, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v020, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v021, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v022, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v023, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v024, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v025, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v026, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v027, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v028, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v029, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v030, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v031, 0x08, 0U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v032, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v033, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v034, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v035, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v036, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v037, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v038, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v039, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v040, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v041, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v042, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v043, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v044, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v045, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v046, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v047, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v048, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v049, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v050, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v051, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v052, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v053, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v054, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v055, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v056, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v057, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v058, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v059, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v060, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v061, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v062, 0x08, 1U) == ::std::numeric_limits<size_t>::max() &&
            CppCore::Memory::byteidxf256(v063, 0x08, 1U) == ::std::numeric_limits<size_t>::max();
         return a && b;
      #else
         return true;
      #endif
      }
      INLINE static bool zbyteidxf512()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         char v[128] = { 
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
         };
         for (size_t i = 0; i < 128; i++)
         {
            for (size_t j = 0; j < 128; j++)
               v[j] = 0x11;
            for (size_t j = 0; j < i; j++)
               v[j] = 'a';
            v[i] = 0x00;
            if (CppCore::Memory::zbyteidxf512(v) != i || CppCore::Memory::zbyteidxf512(v, 2) != i)
               return false;
         }
         return true;
      #else
         return true;
      #endif
      }
      INLINE static bool byteidxf512()
      {
      #if defined(CPPCORE_CPUFEAT_AVX512)
         char v[128] = { 
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
         };
         for (size_t i = 0; i < 128; i++)
         {
            for (size_t j = 0; j < 128; j++)
               v[j] = 0x11;
            for (size_t j = 0; j < i; j++)
               v[j] = 'a';
            v[i] = 0x08;
            if (CppCore::Memory::byteidxf512(v, (char)0x08) != i || CppCore::Memory::byteidxf512(v, (char)0x08, 2) != i)
               return false;
         }
         return true;
      #else
         return true;
      #endif
      }
      INLINE static bool zbyteidxf()
      {
         char v[128] = { 
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
         };
         if (CppCore::Memory::zbyteidxf(v, 128) != std::numeric_limits<size_t>::max())
            return false;
         for (size_t i = 0; i < 128; i++)
         {
            for (size_t j = 0; j < 128; j++)
               v[j] = 0x11;
            for (size_t j = 0; j < i; j++)
               v[j] = 'a';
            v[i] = 0x00;
            if (CppCore::Memory::zbyteidxf(v, i) != std::numeric_limits<size_t>::max()  || CppCore::Memory::zbyteidxf(v, i+1) != i || CppCore::Memory::zbyteidxf(v, 128) != i)
               return false;
         }
         return true;
      }
      INLINE static bool byteidxf()
      {
         char v[128] = { 
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
            0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
         };
         if (CppCore::Memory::zbyteidxf(v, 128) != std::numeric_limits<size_t>::max())
            return false;
         for (size_t i = 0; i < 128; i++)
         {
            for (size_t j = 0; j < 128; j++)
               v[j] = 0x11;
            for (size_t j = 0; j < i; j++)
               v[j] = 'a';
            v[i] = 0x08;
            if (CppCore::Memory::byteidxf(v, i, 0x08) != std::numeric_limits<size_t>::max()  || CppCore::Memory::byteidxf(v, i+1, 0x08) != i || CppCore::Memory::byteidxf(v, 128, 0x08) != i)
               return false;
         }
         return true;
      }
   };
}}

#if defined(CPPCORE_COMPILER_MSVC)
namespace CppCore { namespace Test { namespace VS { 
   /// <summary>
   /// Visual Studio Test Class
   /// </summary>
   TEST_CLASS(Memory)
   {
   public:
      TEST_METHOD(EQUAL32)              { Assert::AreEqual(true, CppCore::Test::Memory::equal32()); }
      TEST_METHOD(EQUAL64)              { Assert::AreEqual(true, CppCore::Test::Memory::equal64()); }
      TEST_METHOD(EQUAL128)             { Assert::AreEqual(true, CppCore::Test::Memory::equal128()); }
      TEST_METHOD(EQUAL256)             { Assert::AreEqual(true, CppCore::Test::Memory::equal256()); }
      TEST_METHOD(EQUAL512)             { Assert::AreEqual(true, CppCore::Test::Memory::equal512()); }
      TEST_METHOD(EQUAL)                { Assert::AreEqual(true, CppCore::Test::Memory::equal()); }
      TEST_METHOD(TESTZERO128)          { Assert::AreEqual(true, CppCore::Test::Memory::testzero128()); }
      TEST_METHOD(TESTZERO256)          { Assert::AreEqual(true, CppCore::Test::Memory::testzero256()); }
      TEST_METHOD(STREAMSET128x4)       { Assert::AreEqual(true, CppCore::Test::Memory::streamset128x4()); }
      TEST_METHOD(STREAMSET256x4)       { Assert::AreEqual(true, CppCore::Test::Memory::streamset256x4()); }
      TEST_METHOD(STREAMSET512x4)       { Assert::AreEqual(true, CppCore::Test::Memory::streamset512x4()); }
      TEST_METHOD(SINGLECOPY128)        { Assert::AreEqual(true, CppCore::Test::Memory::singlecopy128()); }
      TEST_METHOD(SINGLECOPY256)        { Assert::AreEqual(true, CppCore::Test::Memory::singlecopy256()); }
      TEST_METHOD(SINGLECOPY512)        { Assert::AreEqual(true, CppCore::Test::Memory::singlecopy512()); }
      TEST_METHOD(COPY32)               { Assert::AreEqual(true, CppCore::Test::Memory::copy32()); }
      TEST_METHOD(COPY64)               { Assert::AreEqual(true, CppCore::Test::Memory::copy64()); }
      TEST_METHOD(COPY128)              { Assert::AreEqual(true, CppCore::Test::Memory::copy128()); }
      TEST_METHOD(COPY256)              { Assert::AreEqual(true, CppCore::Test::Memory::copy256()); }
      TEST_METHOD(COPY512)              { Assert::AreEqual(true, CppCore::Test::Memory::copy512()); }
      TEST_METHOD(COPY)                 { Assert::AreEqual(true, CppCore::Test::Memory::copy()); }
      TEST_METHOD(COPYBACKWARDS)        { Assert::AreEqual(true, CppCore::Test::Memory::copybackwards()); }
      TEST_METHOD(STREAMCOPY128)        { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy128()); }
      TEST_METHOD(STREAMCOPY128x1)      { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy128x1()); }
      TEST_METHOD(STREAMCOPY128x2)      { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy128x2()); }
      TEST_METHOD(STREAMCOPY128x4)      { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy128x4()); }
      TEST_METHOD(STREAMCOPY256)        { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy256()); }
      TEST_METHOD(STREAMCOPY256x1)      { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy256x1()); }
      TEST_METHOD(STREAMCOPY256x2)      { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy256x2()); }
      TEST_METHOD(STREAMCOPY256x4)      { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy256x4()); }
      TEST_METHOD(STREAMCOPY512)        { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy512()); }
      TEST_METHOD(STREAMCOPY512x1)      { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy512x1()); }
      TEST_METHOD(STREAMCOPY512x2)      { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy512x2()); }
      TEST_METHOD(STREAMCOPY512x4)      { Assert::AreEqual(true, CppCore::Test::Memory::streamcopy512x4()); }
      TEST_METHOD(COPYREVERSE8)         { Assert::AreEqual(true, CppCore::Test::Memory::copyreverse8()); }
      TEST_METHOD(COPYREVERSE16)        { Assert::AreEqual(true, CppCore::Test::Memory::copyreverse16()); }
      TEST_METHOD(COPYREVERSE32)        { Assert::AreEqual(true, CppCore::Test::Memory::copyreverse32()); }
      TEST_METHOD(COPYREVERSE64)        { Assert::AreEqual(true, CppCore::Test::Memory::copyreverse64()); }
      TEST_METHOD(COPYREVERSE128)       { Assert::AreEqual(true, CppCore::Test::Memory::copyreverse128()); }
      TEST_METHOD(COPYREVERSE)          { Assert::AreEqual(true, CppCore::Test::Memory::copyreverse()); }
      TEST_METHOD(STREAMCOPYREVERSE128)   { Assert::AreEqual(true, CppCore::Test::Memory::streamcopyreverse128()); }
      TEST_METHOD(STREAMCOPYREVERSE128x1) { Assert::AreEqual(true, CppCore::Test::Memory::streamcopyreverse128x1()); }
      TEST_METHOD(STREAMCOPYREVERSE128x2) { Assert::AreEqual(true, CppCore::Test::Memory::streamcopyreverse128x2()); }
      TEST_METHOD(STREAMCOPYREVERSE128x4) { Assert::AreEqual(true, CppCore::Test::Memory::streamcopyreverse128x4()); }
      TEST_METHOD(SWAP8)                { Assert::AreEqual(true, CppCore::Test::Memory::swap8()); }
      TEST_METHOD(SWAP16)               { Assert::AreEqual(true, CppCore::Test::Memory::swap16()); }
      TEST_METHOD(SWAP32)               { Assert::AreEqual(true, CppCore::Test::Memory::swap32()); }
      TEST_METHOD(SWAP64)               { Assert::AreEqual(true, CppCore::Test::Memory::swap64()); }
      TEST_METHOD(SWAP128)              { Assert::AreEqual(true, CppCore::Test::Memory::swap128()); }
      TEST_METHOD(SWAP256)              { Assert::AreEqual(true, CppCore::Test::Memory::swap256()); }
      TEST_METHOD(SWAP512)              { Assert::AreEqual(true, CppCore::Test::Memory::swap512()); }
      TEST_METHOD(SWAP)                 { Assert::AreEqual(true, CppCore::Test::Memory::swap()); }
      TEST_METHOD(STREAMSWAP128)        { Assert::AreEqual(true, CppCore::Test::Memory::streamswap128()); }
      TEST_METHOD(STREAMSWAP128x1)      { Assert::AreEqual(true, CppCore::Test::Memory::streamswap128x1()); }
      TEST_METHOD(STREAMSWAP128x2)      { Assert::AreEqual(true, CppCore::Test::Memory::streamswap128x2()); }
      TEST_METHOD(STREAMSWAP128x4)      { Assert::AreEqual(true, CppCore::Test::Memory::streamswap128x4()); }
      TEST_METHOD(STREAMSWAP256)        { Assert::AreEqual(true, CppCore::Test::Memory::streamswap256()); }
      TEST_METHOD(STREAMSWAP512)        { Assert::AreEqual(true, CppCore::Test::Memory::streamswap512()); }
      TEST_METHOD(REVERSE8)             { Assert::AreEqual(true, CppCore::Test::Memory::reverse8()); }
      TEST_METHOD(REVERSE16)            { Assert::AreEqual(true, CppCore::Test::Memory::reverse16()); }
      TEST_METHOD(REVERSE32)            { Assert::AreEqual(true, CppCore::Test::Memory::reverse32()); }
      TEST_METHOD(REVERSE64)            { Assert::AreEqual(true, CppCore::Test::Memory::reverse64()); }
      TEST_METHOD(REVERSE128)           { Assert::AreEqual(true, CppCore::Test::Memory::reverse128()); }
      TEST_METHOD(REVERSE)              { Assert::AreEqual(true, CppCore::Test::Memory::reverse()); }
      TEST_METHOD(CLEAR)                { Assert::AreEqual(true, CppCore::Test::Memory::clear()); }
      TEST_METHOD(ZBYTEIDXF32)          { Assert::AreEqual(true, CppCore::Test::Memory::zbyteidxf32()); }
      TEST_METHOD(ZBYTEIDXF64)          { Assert::AreEqual(true, CppCore::Test::Memory::zbyteidxf64()); }
      TEST_METHOD(ZBYTEIDXF128)         { Assert::AreEqual(true, CppCore::Test::Memory::zbyteidxf128()); }
      TEST_METHOD(ZBYTEIDXF256)         { Assert::AreEqual(true, CppCore::Test::Memory::zbyteidxf256()); }
      TEST_METHOD(ZBYTEIDXF512)         { Assert::AreEqual(true, CppCore::Test::Memory::zbyteidxf512()); }
      TEST_METHOD(ZBYTEIDXF)            { Assert::AreEqual(true, CppCore::Test::Memory::zbyteidxf()); }
      TEST_METHOD(BYTEIDXF32)           { Assert::AreEqual(true, CppCore::Test::Memory::byteidxf32()); }
      TEST_METHOD(BYTEIDXF64)           { Assert::AreEqual(true, CppCore::Test::Memory::byteidxf64()); }
      TEST_METHOD(BYTEIDXF128)          { Assert::AreEqual(true, CppCore::Test::Memory::byteidxf128()); }
      TEST_METHOD(BYTEIDXF256)          { Assert::AreEqual(true, CppCore::Test::Memory::byteidxf256()); }
      TEST_METHOD(BYTEIDXF512)          { Assert::AreEqual(true, CppCore::Test::Memory::byteidxf512()); }
      TEST_METHOD(BYTEIDXF)             { Assert::AreEqual(true, CppCore::Test::Memory::byteidxf()); }
   };
}}}
#endif
